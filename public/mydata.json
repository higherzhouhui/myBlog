[
  {
    "title": "十分钟学会WebSocket",
    "label": [
      "HTML5",
      "JAVASCRIPT"
    ],
    "time": "2024-18-03 00:43:51",
    "uptime": "2024-18-03 00:43:51",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "WebSocket是一种在客户端和服务器之间实现双向通信的网络协议1。它通过在单个TCP连接上提供全双工通信功能，使得服务器可以主动向客户端推送数据，而不需要客户端发起请求。",
    "logo": "https://img0.baidu.com/it/u=248646428,2814622221&fm=253&fmt=auto&app=138&f=PNG?w=500&h=500",
    "content": "<h2 style=\"text-align: start;\">WebSocket与HTTP的区别</h2><p style=\"text-align: start;\">与传统的HTTP协议相比，WebSocket具有以下几个显著的区别：<span style=\"color: rgb(89, 89, 89); background-color: rgb(255, 255, 255); font-size: 15px;\"><br></span></p><p style=\"text-align: start;\"><br></p><li><strong>双向通信</strong>：WebSocket支持客户端和服务器之间的实时双向通信，而HTTP协议是单向请求-响应模式。</li><li><strong>低延迟</strong>：由于WebSocket使用长连接，避免了HTTP的连接建立和断开过程，可以降低通信延迟。</li><li><strong>更少的数据传输</strong>：WebSocket头部信息相对较小，减少了数据传输的开销。</li><li><strong>跨域支持</strong>：WebSocket可以轻松跨域，而HTTP需要通过CORS等机制来实现。<br></li><h2 style=\"text-align: start;\">WebSocket的工作原理<br></h2><p><br></p><p>WebSocket的握手过程和HTTP有所不同。客户端通过发送特定的HTTP请求进行握手，服务器收到请求后进行验证，如果验证通过，则会建立WebSocket连接。</p><p>建立连接后，客户端和服务器之间可以通过WebSocket发送和接收消息，可以使用文本、二进制数据等进行通信。<br></p><h2 style=\"text-align: start;\">WebSocket的应用场景<br></h2><p><br></p><p>WebSocket的实时双向通信特性使得它在许多应用场景中发挥重要作用，例如：</p><ul><li><strong>即时聊天</strong>：WebSocket可以实现实时的聊天功能，用户可以发送和接收消息，实现快速、低延迟的聊天体验。</li><li><strong>实时数据更新</strong>：对于需要实时更新数据的应用，如股票行情、实时监控等，WebSocket可以将数据实时推送给客户端，确保数据的及时更新。</li><li><strong>在线游戏</strong>：在线游戏需要实时的双向通信，WebSocket可以提供稳定的通信通道，支持实时交互和多人游戏。<br></li></ul><h2 style=\"text-align: start;\">WebSocket的使用</h2><pre style=\"text-align: start;\"><code class=\"language-hljs language-javascript code-block-extension-codeshownum\">var Socket = new WebSocket(\"url, [protocol]\");\n\n</code></pre><p style=\"text-align: start;\">以上代码中的第一个参数<span style=\"color: rgb(38, 198, 218); background-color: rgba(77, 208, 225, 0.08);\"><code>url</code></span>, 指定连接的 URL。第二个参数<span style=\"color: rgb(38, 198, 218); background-color: rgba(77, 208, 225, 0.08);\"><code>protocol</code></span>是可选的，指定了可接受的子协议。<br></p><h4 style=\"text-align: start;\">WebSocket 属性<br></h4><p style=\"text-align: start;\">以下是 WebSocket 对象的属性。<br></p><table style=\"width: auto;\"><tbody><tr><th colSpan=\"1\" rowSpan=\"1\" width=\"auto\">属性</th><th colSpan=\"1\" rowSpan=\"1\" width=\"auto\">描述</th></tr><tr><td colSpan=\"1\" rowSpan=\"1\" width=\"auto\">Socket.readyState</td><td colSpan=\"1\" rowSpan=\"1\" width=\"auto\">只读属性readyState表示连接状态，可以是以下值：0-表示连接尚未建立。1-表示连接已建立，可以进行通信。2-表示连接正在进行关闭。3-表示连接已经关闭或者连接不能打开。</td></tr><tr><td colSpan=\"1\" rowSpan=\"1\" width=\"auto\">Socket.bufferedAmount</td><td colSpan=\"1\" rowSpan=\"1\" width=\"auto\">只读属性bufferedAmount已被send()放入正在队列中等待传输，但是还没有发出的UTF-8文本字节数。</td></tr></tbody></table><ul><li>0-表示连接尚未建立。</li><li>1-表示连接已建立，可以进行通信。</li><li>2-表示连接正在进行关闭。</li><li>3-表示连接已经关闭或者连接不能打开。<br></li></ul><h4 style=\"text-align: start;\">WebSocket 事件<br></h4><p style=\"text-align: start;\">以下是 WebSocket 对象的相关方法。</p><table style=\"width: auto; text-align: start;\"><tbody><tr><th colspan=\"1\" rowspan=\"1\" width=\"auto\">方法</th><th colspan=\"1\" rowspan=\"1\" width=\"auto\">描述</th></tr><tr><td colspan=\"1\" rowspan=\"1\" width=\"auto\">Socket.send()</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\">使用连接发送数据</td></tr><tr><td colspan=\"1\" rowspan=\"1\" width=\"auto\">Socket.close()</td><td colspan=\"1\" rowspan=\"1\" width=\"auto\">关闭连接</td></tr></tbody></table><h2 style=\"text-align: start;\"><br></h2>",
    "id": 37740271083514,
    "lookNum": 1247
  },
  {
    "title": "2024年令人眼前一亮的Web框架",
    "label": [
      "JAVASCRIPT",
      "NEXTJS",
      "NUSTJS",
      "ANGULAR"
    ],
    "time": "2024-03-18 03:22:04",
    "uptime": "2024-03-18 03:22:04",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "2024年正向我们走来，我们怀着满腔热情为新的一年制定计划，探索未来一年可以学习或实现的目标。此时此刻，正是探寻来年值得学习的框架、理解其功能和特色的最佳时刻。我们以2023年JS 新星名单为指引，力求保持客观公正的态度。对于每一个特色框架，我们都将突出其最大的优势，使您能够全面理解它们的优点，从而选择适合自己的框架进行尝试！   作者：腾讯TNTWeb前端团队 链接：https://juejin.cn/post/7339830464000213027 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
    "logo": "https://pic.vjshi.com/2021-09-16/816586c10c974033982559cc1efbf52c/00003.jpg?x-oss-process=style/watermark",
    "content": "<p><br></p><p>为谁而设：</p><ul><li>你希望减少JavaScript的编写量</li><li>你希望代码更简单，以超媒体为中心</li></ul><p>HTMX在2023年迅速走红，过去一年间在GitHub上赢得了大量星标。HTMX并非普通的JS框架。如果你使用HTMX，你将大部分时间都花在超媒体的世界中，以与我们通常对现代Web开发的JS密集型视角完全不同的视角看待Web开发。<strong>HTMX利用HATEOAS（Hypermedia作为应用程序状态的引擎）的概念，使开发人员能够直接从HTML访问浏览器功能，而不是使用Javascript。</strong></p><p>此外，它还证明了通过发布令人惊叹的表情符号并以口碑作为主要营销手段，你可以获得人气和认可。不仅如此，你还可能成为HTMX的CEO！它吸引了许多开发人员尝试这种构建网站的方法，并重新思考他们当前的实践。所有这些都使2024年对于这个库的未来发展充满了激动人心的可能性。</p><h2>Wasp - 全栈，开箱即用🚀</h2><p>为谁而设：</p><ul><li>你希望快速构建全栈应用</li><li>你希望在一个出色的一体化解决方案中继续使用React和Node.js，而无需手动挑选堆栈的每一部分</li><li>你希望获得一个为React和Node.js预配置的免费SaaS模板—— <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwasp-lang%2Fopen-saas\" target=\"_blank\">Open SaaS</a></li></ul><p>对于希望简单轻松地全面控制其堆栈的工具的用户，无需再寻找！<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwasp-lang%2Fwasp\" target=\"_blank\">Wasp</a>是一个有主见的全栈框架，利用其编译器以快速简便的方式为你的应用创建数据库、后端和前端。它使用React、Node.js和Prisma，这些都是全栈Web开发人员正在使用的一些最著名的工具。</p><p>Wasp的核心是main.wasp文件，它作为你大部分需求的一站式服务。在其中，你可以定义：</p><ul><li>全栈身份验证</li><li>数据库架构</li><li>异步作业，无需额外的基础设施</li><li>简单且灵活的部署</li><li>全栈类型安全</li><li>发送电子邮件（Sendgrid、MailGun、SMTP服务器等）</li><li>等等……</li></ul><p>最酷的事情是？经过编译器步骤后，你的Wasp应用程序的输出是一个标准的React + Vite前端、Node.js后端和PostgreSQL数据库。从那里，你可以使用单个命令轻松将一切部署到Fly.io等平台。</p><p>尽管有些人可能会认为Wasp的有主见立场是负面的，但它却是Wasp众多全栈功能的驱动力。使用Wasp，单个开发人员或小型团队启动全栈项目变得更加容易，尤其是如果你使用预制的模板或OpenSaaS作为你的SaaS起点。由于项目的核心是定义明确的，因此开始一个项目并可能在几天内创建自己的全栈SaaS变得非常容易！</p><p><strong>此外，还有一点很酷的是，大多数Web开发人员对大多数现有技术的预先存在的知识仍然在这里适用，因为Wasp使用的技术已经成熟。</strong></p><h2>Solid.js - 一流的reactivity库 ↔️</h2><p>适合人群：</p><ul><li>如果你希望代码具有高响应性</li><li>现有的React开发人员，希望尝试一种对他们来说学习曲线较低的高性能工具</li></ul><p>Solid.js是一个性能很高的Web框架，与React有一些相似之处。例如，两者都使用JSX，采用基于函数的组件方法，但Solid.js不使用虚拟DOM，而是将你的代码转换为纯JavaScript。然而，Solid.js因其利用信号、备忘录和效果实现细粒度响应性的方法而更加出名。信号是Solid.js中最简单、最知名的基本元素。它们包含值及其获取和设置函数，使框架能够观察并在DOM中的确切位置按需更新更改，这与React重新渲染整个组件的方式不同。</p><p>Solid.js不仅使用JSX，还对其进行了增强。它提供了一些很酷的新功能，例如Show组件，它可以启用JSX元素的条件渲染，以及For组件，它使在JSX中更轻松地遍历集合变得更容易。另一个重要的是，它还有一个名为Solid Start的元框架（目前处于测试版），它使用户能够根据自己的喜好，使用基于文件的路由、操作、API路由和中间件等功能，以不同的方式渲染应用程序。</p><h2>Astro - 静态网站之王👑</h2><p>适合人群：</p><ul><li>如果您需要一款优秀的博客、CMS重型网站工具</li><li>需要一个能够集成其他库和框架的框架</li></ul><p>如果您在2023年构建了一个内容驱动的网站，那么很有可能您选择了Astro作为首选框架来实现这一目标！Astro是另一个使用不同架构概念来脱颖而出的框架。对于Astro来说，这是岛屿架构。在Astro的上下文中，岛屿是页面上的任何交互式UI组件，与静态内容的大海形成鲜明对比。由于这些岛屿彼此独立运行，因此页面可以有任意数量的岛屿，但它们也可以共享状态并相互通信，这非常有用。</p><p><strong>关于Astro的另一个有趣的事情是，他们的方法使用户能够使用不同的前端框架，如React、Vue、Solid来构建他们的网站。因此，开发人员可以轻松地在其当前知识的基础上构建网站，并利用可以集成到Astro网站中的现有组件。</strong></p><h2>Svelte - 简单而有效🎯</h2><p>适合人群：</p><ul><li>您希望学习一个简单易上手的框架</li><li>追求简洁且代码执行速度快的开发体验</li></ul><p><strong>Svelte是另一个尝试通过尽可能直接和初学者友好的方式来简化和加速Web开发的框架。它是一个很容易学习的框架，因为要使一个属性具有响应性，您只需声明它并在HTML模板中使用它。</strong> 每当在JavaScript中程序化地更新值时（例如，通过触发onClick事件按钮），它将在UI上反映出来，反之亦然。</p><p>Svelte的下一步将是引入runes。runes将是Svelte处理响应性的方式，使处理大型应用程序变得更加容易。类似于Solid.js的信号，符文通过使用类似函数的语句提供了一种直接访问应用程序响应性状态的方式。与Svelte当前的工作方式相比，它们将允许用户精确定义整个脚本中哪些部分是响应性的，从而使组件更加高效。类似于Solid和Solid Start，Svelte也有其自己的框架，称为SvelteKit。SvelteKit为用户提供了一种快速启动其由Vite驱动的Svelte应用程序的方式。它提供了路由器、构建优化、不同的渲染和预渲染方式、图像优化等功能。</p><h2>Qwik - 非常快🚤</h2><p>适合人群：</p><ul><li>如果您想要一个高性能的Web应用</li><li>现有的React开发人员，希望尝试一种高性能且学习曲线平缓的框架</li></ul><p>最后一个但同样重要的框架是Qwik。<strong>Qwik是另一个利用JSX和函数组件的框架，类似于Solid.js，为基于React的开发人员提供了一个熟悉的环境，以便尽快上手。正如其名字所表达的，Qwik的主要目标是实现您应用程序的最高性能和最快执行速度。</strong></p><p>Qwik通过利用可恢复性（resumability）的概念来实现其速度。简而言之，可恢复性基于在服务器上暂停执行并在客户端上恢复执行而无需重新播放和下载全部应用程序逻辑的想法。这是通过延迟JavaScript代码的执行和下载来实现的，除非有必要处理用户交互，这是一件非常棒的事情。它使整体速度提高，并将带宽降低到绝对最小值，从而实现近乎瞬间的加载。</p><h2>结论</h2><p>在我们所提及的所有框架和库中，最大的共同点是它们的熟悉度。每个框架和库都试图以构建在当前知识基础上的方式吸引潜在的新开发者，而不是做一些全新的事情，这是一个非常棒的理念。</p><p>当然，还有许多我们未在整篇文章中提及但值得一提的库和框架。例如，Angular 除了新的标志和文档外，还包括信号和新的控制流。还有 Remix，它增加了对 Vite、React Server Components 和新的 Remix SPA 模式的支持。最后，我们不能忘记 Next.js，它在过去几年中已成为 React 开发者的默认选择，为新的 React 功能铺平了道路。<br></p><p>作者：腾讯TNTWeb前端团队<br>链接：https://juejin.cn/post/7339830464000213027<br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p><br></p><p><br></p><p><br></p><p><br></p><ul><li></li></ul><p><br></p>",
    "id": 95379130157204,
    "lookNum": 8863
  },
  {
    "title": "2024 Vue 生态工具推荐",
    "label": [
      "VUE",
      "UNIAPP",
      "HTML5",
      "CSS"
    ],
    "time": "2024-03-18 03:24:10",
    "uptime": "2024-03-18 03:24:10",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "在没有任何遗留限制的情况下从零启动一个项目可能会令人鸡冻，但也会令人头大。不受限制地自由构建 App 可能会导致浪费大量时间研究和评估工具，最终会分散实际工作的注意力。即使做出了最好的选择，也总会重新考虑备胎方案，这就是“选择的悖论”。",
    "logo": "https://static.open-open.com/lib/uploadImg/20161012/20161012105523_94.png",
    "content": "<p><br></p><p>本期共享的是 —— Vue 生态系统中的所有行业标准工具。</p><h2>包管理器</h2><p>处理外部包的人气工具有 3 种：</p><ul><li><code>npm</code></li><li><code>yarn</code></li><li><code>pnpm</code></li></ul><p><code>npm</code> 又老又慢。<code>yarn</code> 速度更快，是一个可靠的选择。但总体而言，<code>pnpm</code> 天下第一，它速度极快且节省空间。<code>pnpm</code> 在许多地方使用每段代码，而不需要额外的副本。此外，<code>pnpm</code> 本身支持具有最少配置的 monorepo 设置。</p><p>个人建议：包管理器优先选择 <code>pnpm</code></p><h2>构建工具</h2><p>在这里推荐 Vite 应该不足为奇。Vite 使用原生 ES 模块，实现快如闪电的服务器启动。Vite 具有内置的热模块替换支持，而且还通过 Rollup 优化生产构建，确保既小又快的加载打包。此外，与其他备胎方案相比，Vite 配置要容易得多。最后，Vite 因为与框架无关而获得加分。</p><p>个人推荐：构建工具优先选择 <code>Vite</code></p><h2>Vue 版本</h2><p>Vue 2 文档在搜索引擎和 Stackoverflow 中的排名仍然高举不下，如果我们必须在版本之间进行选择，这可能会令人头大。但粉丝请记住，Vue 2 不再开源维护，Vue 3 现在是长期支持的版本。Vue 3 具有先前版本的所有优点，但具有利用组合式 API 的不同语法。</p><p>个人建议：Vue 版本优先选择 Vue 3</p><h2>SFC（单文件组件）</h2><p>将组件的所有构建块保留在同一个位置是 Vue 的一大特色，SFC = 模板 + 样式 + 脚本。如果您认为某个组件变得又臭又长，那么最好将其拆分为子组件。我们仍然可以为每个部分使用不同的文件，但请不要这样做。</p><p>个人建议：优先选用 SFC</p><h2>路由</h2><p>Vue 有一个官方的路由模块，它与 Vue 内核深度集成，这使构建 SPA（单页应用程序）变得轻而易举。</p><p>一些给力的功能包括嵌套和动态路由、基于模块化组件的配置、路由参数、过渡效果、与自动活动 CSS 类的链接、HTML5 <code>history</code> 模式或哈希模式，以及可自定义的滚动行为。</p><p>由于缺乏替代品，Vue Router 无法获得应有的宣传和荣誉，但它确实是一个极其强大且功能齐全的库。</p><p>个人建议：优先选用 Vue Router</p><h2>状态管理</h2><p>这可能有点令人头大，因为在 Pinia 取代 Vuex 之前，Vuex 多年来一直是官方推荐。Pinia 是从零开始编写的，与 Vue 3 的组合式 API 架构无缝集成。Pinia 现在是状态管理的官方推荐。</p><p>Pinia 的唯一真正替代方案是使用自定义组合式函数来保存我们的状态。对于迷你 App 而言，这可能是一个不错的解决方案，但由于 Pinia 遵循相同的架构，具有很小的占用空间、增强的性能和开发工具支持，因此被强烈推荐。</p><p>个人建议：优先使用 Pinia</p><h2>数据请求</h2><p>原生 <code>fetch</code> 已经获得了重要的浏览器支持，这被认为是人气爆棚的 axios 库的替代品。VueUse 还提供了带有更高级配置选项的 <code>useFetch</code> 钩子。</p><p>但我强烈推荐的是 <code>vue-query</code>。它使用声明性语法简化了数据请求，并优雅地处理一大坨重复性任务，比如加载和错误状态、分页、过滤、排序和缓存。</p><p>个人建议：数据请求优先选择 Vue Query</p><h2>组件营销</h2><p>我确信还有其他选择，但 Storybook 占据主导地位，以至于其他所有选项都不在本人的考虑范围内。真正的问题是 Storybook 是否值得大肆宣传。</p><p>就我个人而言，我确实喜欢使用它来单独开发组件。Storybook 速度更快，让我了解组件的每个依赖。此外，它可以是一种很好的文档形式。</p><p>个人建议：组件文档优先选择 Storybook</p><h2>测试</h2><p>测试问题本身就可以写成一篇文章。我将重点关注我认为对任何 App 单元测试、e2e（端到端测试）和可视化测试都至关重要的测试类型。</p><h3>单元测试</h3><p>到目前为止，所有建议均来自我的个人经验。所以 Jest 就是我在本节中应该推荐的内容。它是一款既给力又可靠的测试运行器，我对它非常满意。</p><p>但有一个工具我还没有机会测试。Vitest 是一个由 Vite 驱动的测试运行器，具有兼容 Jest 的语法，我认识的每个人都支持它。所以我必须选择它作为推荐。</p><p>个人建议：单元测试优先选择 Vitest</p><h3>端到端测试</h3><p>使用 Cypress，它不仅是人气最高的选项，而且最新版本在稳定性和消除不稳定方面投入了大量精力。除了成为对开发者最友好的工具之外，它还使其成为 e2e 测试的最佳选择。</p><p>另一种选择是 Playwright，总体上可能会更快一些，但对我来说，采用率和生态系统还不够大，不足以在我的管道中得到信任。</p><p>个人建议：端到端测试优先选择 Cypress</p><h3>可视化测试</h3><p>这个难以抉择。我目前正在使用 Applitools，并且我非常了解良好的可视化测试套件的重要性。虽然但是，多用户环境中的冲突解决是极其痛苦的，并且绝对可以改进。</p><p>我的建议肯定是拥​​有一个可视化测试套件，我保证当我的工作流程不再让我头大时，我会带着一个特定的工具回来。</p><p>个人建议：你开心就好</p><h2>UI 框架</h2><p>我甚至不记得我最后一次使用 UI 框架的愉快经历。而且可能它并不在 Vue 世界中。选择很多，但问题也很多。配置地狱、臃肿的实现、糟糕的性能和内存泄漏等等。这就是为什么我当前建议在无头组件库之上进行自定义实现。在 Vue 世界中，这意味着 shadcn-vue 构建在 radix-vue 之上。这不是一个我们可以立即安装并开始使用的库。我们需要努力使其适应我们的风格指南，对我来说，这是一件好事。</p><p>根据记录，如果您想要开箱即用的 UI 库，若干人气爆棚的选项包括但不限于：</p><ul><li>Vuetify</li><li>Element UI</li><li>Quasar Framework</li></ul><p>个人建议：UI 框架优先选择 shadcn-vue 和 radix-vue</p><h2>静态类型</h2><p>毋庸置疑，这个话题的争议性比超乎我的想象。我知道 TS 很容易被滥用，并剥夺编程的乐趣，但私以为如果 TS 使用得当，它可以增强我们作为程序员阅读代码的主要角色。强烈推荐批判性思维和 TSLint。</p><p>个人建议：静态类型优先选择 TS</p><h2>IDE（集成开发环境）</h2><p>有两个人气爆棚且平分秋色的选择：IntelliJ 和 VSCode。IntelliJ 不是免费的，但 Vue 是开箱即用的支持，而 VSCode 是免费且开源的，但需要额外的配置。如果您更喜欢 VSCode，请确保安装 Volar 和 TypeScript Vue Plugin（Volar），增强开发体验。</p><p>个人建议：IDE 优先选择 IntelliJ 或 VSCode</p><h2>API文档</h2><p>Swagger 是迄今为止人气最高的选择。它基于 OpenAPI 规范，可以轻松地与其他开发者共享 API 文档。这是一个成熟且得到良好支持的项目，背后有一个庞大的社区。</p><p>个人建议：API 文档优先选择 Swagger</p><h2>结语</h2><p>这些都是我在 2024 年使用 Vue 构建可扩展 App 的个人建议。机智如你可能已经察觉，大部分情况下我都喜欢坚持行业标准。私以为这可以与其他工具产生协同作用，并且它们的热度使得在 StackOverflow 上寻找错误变得更容易。举个栗子，偏离标准，比如实现自己的轻量级路由，一开始似乎是个好主意，但从长远来看，它肯定会导致比解决的问题更多的问题。</p><p>本期话题是 —— 你有什么小众但好用的 Vue 工具人推荐吗？</p><p>欢迎在本文下方自由言论，文明共享。谢谢大家的点赞，掰掰~</p><p><strong>《前端猫猫教》每日 9 点半更新，坚持阅读，自律打卡，每天一次，进步一点</strong></p>",
    "id": 7830128514090,
    "lookNum": 3174
  },
  {
    "title": "🔥 2024 推荐一款 Vue3 移动端模板 （⚠十个理由）",
    "label": [
      "VUE"
    ],
    "time": "2024-03-18 03:31:27",
    "uptime": "2024-03-18 03:31:27",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "我之前写过一篇 推荐一款基于Vue3的移动H5模板，加速你的移动应用开发，那篇文章介绍了我为什么做这个模板，简单讲当时 Vite 作为一款新的构建工具刚刚出来，还有Vue3也刚刚发布不久，社区里面关于中后台模板非常丰富，但是移动端的还很少，或者说做的不够好，所以那样一个契机下我从2022年一直开源到现在，也快两年时间了。 这个过程中，vue3-vant-mobile 也发布了 2.0 版本。新增了很多功能和示例，这是这篇文章的目的之一，讲讲新增了什么。第二个目的，2024年的时候，移动端模板也有很多了，不过我自认为我做的还算是可以的，所以我想推荐你用这一款。 需要强调的是移动端该有的东西，本文没有太多描述，它本该如此。介绍的是相对于其它模板的优势。希望的是收获更多关注，让模板有更多人使用。为了不让文章那么乏味，会有对比、会有思考，我们开始吧",
    "logo": "https://img0.baidu.com/it/u=3548988512,2938760182&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500",
    "content": "<h3>1. vue3生态 - 最好用的 DX 体验都有</h3><p>在模板早期的时候，它支持的事情不是很多，就是一个很普通的移动端模板，应该有的特性比如：移动端适配、Mock 数据模拟、VConsole 调试、Less 预处理器，默认内置的组件库，以及 vue3 全家桶里面的状态管理 Pinia、Router、setup、TS 支持等等。不过在 2.0 的时候，我增加了基于文件路由、组件自动引入、基于文件路由的布局系统、API自动导入、PWA（渐进式Web）、Unocss、PC 版心等等。这些新特性在使用 VS Code 编辑器进行业务开发，就会发现效率飞起。对了，Eslint 采用了antfu 的最新 eslint flat 插件配置，DX 体验更上一层楼。在同类项目当中，我发现这些特性要么就是没有集成、或者不全、甚至依赖版本滞后，但是这个模板一直在更新，使用最新最稳定的版本。</p><h3>2. vw 响应式、PC友好</h3><p>很多做前端的同学都知道，移动端适配这块有两种主流的方案，rem 和 vw, 不过基于 rem 的方案也说过是应对早期这种适配的解决方案，现在 vw 单位在众多浏览器支持度更好了，更建议使用 vw, 所以模板也是采用了这种实现。PC 友好又是什么呢？vw/vh 是一种视宽和视高的单位，基于浏览器窗体大小来的；而 rem 是基于文档头设置的font-size 决定的, 当用户在 PC 端打开你的移动端应用的时候，所有页面元素都会放大，导致很多交互都失效了，甚至个别元素不能操作。如果 rem 方案的话，我之前写过一款 rem-font-size 插件，可以设置一个版心，其实就是修改根字体大小，以及限制最大宽度，vw/vh适配 要多谢 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwswmsword%2Fpostcss-mobile-forever\" target=\"_blank\">postcss-mobile-forever</a> &nbsp;插件的作者给模板的一个PR，它也解决了 PC 版心的问题。所以这块的担心，也帮大家考虑到了。</p><h3>3. 贡献者最多</h3><p>项目是托管在 GITHUB 上的，目前为止，有10位小伙伴参与了贡献，其中一位在我合并代码时不小心给合并掉了，当时因为这件事很难受。其实这个项目的 Fork 有 118，不过真正参与的同学也就是10位，但是也是一个很不错的数字。今天刷到尤大的一个帖子。</p><p><br></p><p>然后底下有个评论很有意思。</p><p><br></p><p>是的，在项目的早期很小的时候，项目维护者是很希望有更多贡献者参与进来，哪怕是错别字一类的PR 提交，这是很令人兴奋的事情。同时，这也意味着更多人在使用，社区影响力也就越大。</p><p>下面是给 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FCharleeWa%2Fvue3-vant-mobile%3Ftab%3Dreadme-ov-file%23contributors\" target=\"_blank\">vue3-vant-mobile</a> 贡献的小伙伴，谢谢他们 。</p><p><br></p><h3>4. ESM 默认</h3><p>估计不少同学会笑起来，ESM 默认就是在package.json 设置 type: \"module\"？ 这也是一个优势吗？至少我认为是的， 从两方面说说。其中一方面是如果不设置项目类型，项目默认采用Commonjs 规范，在一个没有明确类型的项目里，可能存在两种 CJS 或者 ESM 写法，让当事人去维护感觉会很错乱。当我显式设置 ESM 项目类型以后，1.0 以前很多的模块引入写法以及包依赖就报了大量错误，所以升级到 2.0 是一大部分工作，相当于重写。另外一方面，可能使用的人无感知，就是本机会加快渲染，因为采用的是浏览器原生支持的模块加载机制更快了。所以这也算是一个优势！</p><h3>5. Vant 官方社区推荐</h3><p>模板内置了 Vant 组件库，我自认为这是移动端最好的组件库之一。有一天，我在看 Vant 官网文档的时候，突然发现我的这个模板项目被 Vant、Rspack 作者设置为了官网的生态之一，这一点很让我兴奋。好奇什么时候被添加进去的，所以我翻看了 commit 提交记录。</p><p><br></p><p>这是官网的 - <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fvant-ui.github.io%2Fvant%2F%23%2Fzh-CN%23she-qu-sheng-tai\" target=\"_blank\">补充</a>。</p><p><br></p><p>如果说他们愿意把这个项目放到他们官网生态里面，至少说明它还不错，可以给大家一个很好的示范。这好比一个非常有公信力的人给你一个人格背书，所以大家可以放心使用。</p><h3>6. 不断增加的演示和示例</h3><p>自 2.0 以后，项目增加了 unocss 示例、持久化 Pinia 演示、404页演示、重写了 Dark Mode，未来还会增加更多组件，以及高级组件。</p><p>刚截图的时候，发现9分钟前的时候有人提需求，哈哈哈哈！（谁给项目提一个PR 🎉 ~ ）</p><p>这是已经完成的工作，作者很认真做开源。</p><h3>7. TS纯度 63+</h3><p>TS 语言的好处是不言而喻的，不只是提前发现类型错误问题，还有类型推导这种方便的特性。我之前为了快速完成一个 demo 没有使用 ts, 我突然意识到我都快不会写 js 项目了 😓。总之，真的很香！如果模板示例增多的话，Vue 语言应该会占更大部分，目前 TS 多，是因为不少配置文件。</p><h3>8. 星星 570+</h3><p>我以前的想法 100+ 就很满足了，但是后来就像滚雪球一样，大家都在用的时候，你发现你要做的更好。继续加油！<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FCharleeWa%2Fvue3-vant-mobile\" target=\"_blank\">给我鼓励 ⭐</a> 。</p><h3>9. 代码性能评分100%</h3><p>最近，我使用 lighthourse 工具分析了这个模板，把所有细节重新优化了一下，大家可以看到跑分还是不错的。</p><h3>10. 大佬关注</h3><p>有 Vant 、Rspack 作者，还有大圣老师，他们都在关注。</p><p><br></p>",
    "id": 31229246375886,
    "lookNum": 6171
  },
  {
    "title": "一个 url 就把人家网站克隆了？",
    "label": [
      "HTML5",
      "CSS",
      "JAVASCRIPT",
      "VUE"
    ],
    "time": "2024-03-18 03:32:55",
    "uptime": "2024-03-18 03:32:55",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "今天瞧见了一个开源库，https://github.com/abi/screenshot-to-code ，根据它的描述，这个简单的应用程序可以将屏幕截图转换为代码（HTML/Tailwind CSS、React、Bootstrap 或 Vue）。 它使用 GPT-4 Vision 生成代码，并使用 DALL-E 3 生成外观相似的图像。 更加逆天的是，现在是你只要输入一个 URL，他就给你把人家网站克隆了。   ",
    "logo": "https://img2.baidu.com/it/u=2645588193,2101949805&fm=253&fmt=auto&app=138&f=JPEG?w=1002&h=500",
    "content": "<p><br></p><h3>这技术背后的实现原理是什么</h3><p>screenshot-to-code这个工具，其核心功能是将图像转化为代码。它基于开放人工智能库GPT-4 Vision和DALL-E 3的技术，这两种AI模型都是OpenAI的产品且在视觉理解方面表现出色。</p><p>当用户上传截图，GPT-4 Vision会读取并理解截图中的内容，然后基于这些理解生成对应的HTML，Tailwind，React，Vue等代码。这部分对应的源码可以在这里查看 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fabi%2Fscreenshot-to-code%2Fblob%2F072b286b6dfa65eaa646f68def8a0b0f6d157217%2Fbackend%2Froutes%2Fgenerate_code.py%23L43\" target=\"_blank\"><strong>https://github.com/abi/screenshot-to-code/blob/072b286b6dfa65eaa646f68def8a0b0f6d157217/backend/routes/generate_code.py#L43</strong></a> ，背后推动的 prompt 可以简单了解下</p><pre><code class=\"language-hljs language-xml code-block-extension-codeshownum\">HTML_TAILWIND_SYSTEM_PROMPT = \"\"\"\nYou are an expert Tailwind developer\nYou take screenshots of a reference web page from the user, and then build single page apps \nusing Tailwind, HTML and JS.\nYou might also be given a screenshot(The second image) of a web page that you have already built, and asked to\nupdate it to look more like the reference image(The first image).\n\n- Make sure the app looks exactly like the screenshot.\n- Pay close attention to background color, text color, font size, font family, \npadding, margin, border, etc. Match the colors and sizes exactly.\n- Use the exact text from the screenshot.\n- Do not add comments in the code such as \"&lt;!-- Add other navigation links as needed --&gt;\" and \"&lt;!-- ... other news items ... --&gt;\" in place of writing the full code. WRITE THE FULL CODE.\n- Repeat elements as needed to match the screenshot. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like \"&lt;!-- Repeat for each news item --&gt;\" or bad things will happen.\n- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.\n\nIn terms of libraries,\n\n- Use this script to include Tailwind: &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n- You can use Google Fonts\n- Font Awesome for icons: &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\"&gt;&lt;/link&gt;\n\nReturn only the full code in &lt;html&gt;&lt;/html&gt; tags.\nDo not include markdown \"```\" or \"```html\" at the start or end.\n\"\"\"\n</code></pre><p>前面介绍过，他不只是可以生成 HTML 的代码，还可以囊括其他语言，包括 react 和 Vue。其中有一个我不太理解的地方，if there are 15 items, the code should have 15 items 那如果这里有 100 个 list 的 item，他是否生成 100 个呢，为什么不告诉模型，使用 list.map(e⇒componet)的方式呢？将统一的模式封装成一个独立的组件，代码的维护性不是大大的加强吗？</p><h3>生成代码的维护性如何？</h3><p>带着疑问，跑了一下demo，果不其然，生成的代码确实是比较机械化的方式，还是缺乏维护性的。</p><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4513e98ea96148a680bec06e88efde0a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2000&h=1109&s=126580&e=webp&b=042347\" alt=\"loading\" data-href=\"\" style=\"\"/></p><h3>为何需要 DALLE3</h3><p>而DALL-E 3则负责生成与原图相似的图像，这能帮助用户更直观地预览和了解生成的代码对应的页面效果。</p><p>screenshot-to-code的优势在于，它不仅可以从图片生成代码，还可以根据代码进一步优化图片，这种“图片至代码，代码至图片”的双向优化，使结果更精细，更贴近用户需求。</p><p>然而给我的感觉是，这种生成的代码更像是一种一锤子买卖的外包工程，基本不具备维护性的。</p><h3>其他生成代码的工具</h3><p>据我了解，vercel 很早就在做代码自动生成，而且很早就推出了其服务，服务在此：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fv0.dev%2F\" target=\"_blank\"><strong>https://v0.dev/</strong></a></p><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0dd94043798144e0aafb385a8cf11bc7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2000&h=621&s=15212&e=webp&b=fdfdfd\" alt=\"loading\" data-href=\"\" style=\"\"/></p><p>使用的方式就是和模型对话来生成代码，代码是 vercel 提供的服务，实时渲染给你看效果，而且，还可以基于效果继续进行对话，目前我没有触发到最大的对话条数，理论上可以一直对话。如下就是我生成的效果。从美观度上来看，还是挺不错的。</p><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01359dd8fb7147acb6b1f69cc6f9f086~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2000&h=1370&s=33324&e=webp&b=ffffff\" alt=\"loading\" data-href=\"\" style=\"\"/></p><p>其自动生成的代码如下：</p><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62d59b31e2c04ef7ad743d66a9df9121~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2000&h=1282&s=87356&e=webp&b=00060b\" alt=\"loading\" data-href=\"\" style=\"\"/></p><p>同样的弊端，也在 vercel 这套自动生成代码上有所体现：</p><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdd1a2b2be584a04a28742e0a36d53fc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2000&h=824&s=73664&e=webp&b=fdfdfd\" alt=\"loading\" data-href=\"\" style=\"\"/></p><p>我看了一个生成有列表相关的例子，这里通过浏览代码发现，他这里依旧是机械化的翻译了 dom 结构，而不是使用可维护性较高的方式来输出。</p><p>总结：个人感觉，这块目前用来做一些demo，或者做一些打一些底稿，还是很有助于效率提高的。对于screenshot-to-code不要认为他能够直接可以将别人web 给直接复刻了，然后就轻松拿来运营，至少离这里还差太远太远的距离了，如后端逻辑呢？网站的性能呢？目前基本上等同于对于 HTML 点击右键，保存网页。对于 vercel 的服务，可以用来做开发提效，让它生成一些代码，然后从中获取一些灵感或者手动提取可复用组件。</p><p><strong>探索代码的无限可能，与老码小张一起开启技术之旅。点关注，未来已来，每一步深入都不孤单。<br></strong></p><p><br></p><p><br></p>",
    "id": 83644761055536,
    "lookNum": 8904
  },
  {
    "title": "2024 Vue 生态工具推荐",
    "label": [
      "VUE",
      "UNIAPP",
      "HTML5",
      "CSS"
    ],
    "time": "2024-03-19 01:04:32",
    "uptime": "2024-03-19 01:04:32",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "在没有任何遗留限制的情况下从零启动一个项目可能会令人鸡冻，但也会令人头大。不受限制地自由构建 App 可能会导致浪费大量时间研究和评估工具，最终会分散实际工作的注意力。即使做出了最好的选择，也总会重新考虑备胎方案，这就是“选择的悖论”。",
    "logo": "https://img0.baidu.com/it/u=1820915627,2937947019&fm=253&fmt=auto&app=120&f=JPEG?w=1674&h=800",
    "content": "<p>本期共享的是 —— Vue 生态系统中的所有行业标准工具。</p><h2>包管理器</h2><p>处理外部包的人气工具有 3 种：</p><ul><li><code>npm</code></li><li><code>yarn</code></li><li><code>pnpm</code></li></ul><p><code>npm</code> 又老又慢。<code>yarn</code> 速度更快，是一个可靠的选择。但总体而言，<code>pnpm</code> 天下第一，它速度极快且节省空间。<code>pnpm</code> 在许多地方使用每段代码，而不需要额外的副本。此外，<code>pnpm</code> 本身支持具有最少配置的 monorepo 设置。</p><p>个人建议：包管理器优先选择 <code>pnpm</code></p><h2>构建工具</h2><p>在这里推荐 Vite 应该不足为奇。Vite 使用原生 ES 模块，实现快如闪电的服务器启动。Vite 具有内置的热模块替换支持，而且还通过 Rollup 优化生产构建，确保既小又快的加载打包。此外，与其他备胎方案相比，Vite 配置要容易得多。最后，Vite 因为与框架无关而获得加分。</p><p>个人推荐：构建工具优先选择 <code>Vite</code></p><h2>Vue 版本</h2><p>Vue 2 文档在搜索引擎和 Stackoverflow 中的排名仍然高举不下，如果我们必须在版本之间进行选择，这可能会令人头大。但粉丝请记住，Vue 2 不再开源维护，Vue 3 现在是长期支持的版本。Vue 3 具有先前版本的所有优点，但具有利用组合式 API 的不同语法。</p><p>个人建议：Vue 版本优先选择 Vue 3</p><h2>SFC（单文件组件）</h2><p>将组件的所有构建块保留在同一个位置是 Vue 的一大特色，SFC = 模板 + 样式 + 脚本。如果您认为某个组件变得又臭又长，那么最好将其拆分为子组件。我们仍然可以为每个部分使用不同的文件，但请不要这样做。</p><p>个人建议：优先选用 SFC</p><h2>路由</h2><p>Vue 有一个官方的路由模块，它与 Vue 内核深度集成，这使构建 SPA（单页应用程序）变得轻而易举。</p><p>一些给力的功能包括嵌套和动态路由、基于模块化组件的配置、路由参数、过渡效果、与自动活动 CSS 类的链接、HTML5 <code>history</code> 模式或哈希模式，以及可自定义的滚动行为。</p><p>由于缺乏替代品，Vue Router 无法获得应有的宣传和荣誉，但它确实是一个极其强大且功能齐全的库。</p><p>个人建议：优先选用 Vue Router</p><h2>状态管理</h2><p>这可能有点令人头大，因为在 Pinia 取代 Vuex 之前，Vuex 多年来一直是官方推荐。Pinia 是从零开始编写的，与 Vue 3 的组合式 API 架构无缝集成。Pinia 现在是状态管理的官方推荐。</p><p>Pinia 的唯一真正替代方案是使用自定义组合式函数来保存我们的状态。对于迷你 App 而言，这可能是一个不错的解决方案，但由于 Pinia 遵循相同的架构，具有很小的占用空间、增强的性能和开发工具支持，因此被强烈推荐。</p><p>个人建议：优先使用 Pinia</p><h2>数据请求</h2><p>原生 <code>fetch</code> 已经获得了重要的浏览器支持，这被认为是人气爆棚的 axios 库的替代品。VueUse 还提供了带有更高级配置选项的 <code>useFetch</code> 钩子。</p><p>但我强烈推荐的是 <code>vue-query</code>。它使用声明性语法简化了数据请求，并优雅地处理一大坨重复性任务，比如加载和错误状态、分页、过滤、排序和缓存。</p><p>个人建议：数据请求优先选择 Vue Query</p><h2>组件营销</h2><p>我确信还有其他选择，但 Storybook 占据主导地位，以至于其他所有选项都不在本人的考虑范围内。真正的问题是 Storybook 是否值得大肆宣传。</p><p>就我个人而言，我确实喜欢使用它来单独开发组件。Storybook 速度更快，让我了解组件的每个依赖。此外，它可以是一种很好的文档形式。</p><p>个人建议：组件文档优先选择 Storybook</p><h2>测试</h2><p>测试问题本身就可以写成一篇文章。我将重点关注我认为对任何 App 单元测试、e2e（端到端测试）和可视化测试都至关重要的测试类型。</p><h3>单元测试</h3><p>到目前为止，所有建议均来自我的个人经验。所以 Jest 就是我在本节中应该推荐的内容。它是一款既给力又可靠的测试运行器，我对它非常满意。</p><p>但有一个工具我还没有机会测试。Vitest 是一个由 Vite 驱动的测试运行器，具有兼容 Jest 的语法，我认识的每个人都支持它。所以我必须选择它作为推荐。</p><p>个人建议：单元测试优先选择 Vitest</p><h3>端到端测试</h3><p>使用 Cypress，它不仅是人气最高的选项，而且最新版本在稳定性和消除不稳定方面投入了大量精力。除了成为对开发者最友好的工具之外，它还使其成为 e2e 测试的最佳选择。</p><p>另一种选择是 Playwright，总体上可能会更快一些，但对我来说，采用率和生态系统还不够大，不足以在我的管道中得到信任。</p><p>个人建议：端到端测试优先选择 Cypress</p><h3>可视化测试</h3><p>这个难以抉择。我目前正在使用 Applitools，并且我非常了解良好的可视化测试套件的重要性。虽然但是，多用户环境中的冲突解决是极其痛苦的，并且绝对可以改进。</p><p>我的建议肯定是拥​​有一个可视化测试套件，我保证当我的工作流程不再让我头大时，我会带着一个特定的工具回来。</p><p>个人建议：你开心就好</p><h2>UI 框架</h2><p>我甚至不记得我最后一次使用 UI 框架的愉快经历。而且可能它并不在 Vue 世界中。选择很多，但问题也很多。配置地狱、臃肿的实现、糟糕的性能和内存泄漏等等。这就是为什么我当前建议在无头组件库之上进行自定义实现。在 Vue 世界中，这意味着 shadcn-vue 构建在 radix-vue 之上。这不是一个我们可以立即安装并开始使用的库。我们需要努力使其适应我们的风格指南，对我来说，这是一件好事。</p><p>根据记录，如果您想要开箱即用的 UI 库，若干人气爆棚的选项包括但不限于：</p><ul><li>Vuetify</li><li>Element UI</li><li>Quasar Framework</li></ul><p>个人建议：UI 框架优先选择 shadcn-vue 和 radix-vue</p><h2>静态类型</h2><p>毋庸置疑，这个话题的争议性比超乎我的想象。我知道 TS 很容易被滥用，并剥夺编程的乐趣，但私以为如果 TS 使用得当，它可以增强我们作为程序员阅读代码的主要角色。强烈推荐批判性思维和 TSLint。</p><p>个人建议：静态类型优先选择 TS</p><h2>IDE（集成开发环境）</h2><p>有两个人气爆棚且平分秋色的选择：IntelliJ 和 VSCode。IntelliJ 不是免费的，但 Vue 是开箱即用的支持，而 VSCode 是免费且开源的，但需要额外的配置。如果您更喜欢 VSCode，请确保安装 Volar 和 TypeScript Vue Plugin（Volar），增强开发体验。</p><p>个人建议：IDE 优先选择 IntelliJ 或 VSCode</p><h2>API文档</h2><p>Swagger 是迄今为止人气最高的选择。它基于 OpenAPI 规范，可以轻松地与其他开发者共享 API 文档。这是一个成熟且得到良好支持的项目，背后有一个庞大的社区。</p><p>个人建议：API 文档优先选择 Swagger</p><h2>结语</h2><p>这些都是我在 2024 年使用 Vue 构建可扩展 App 的个人建议。机智如你可能已经察觉，大部分情况下我都喜欢坚持行业标准。私以为这可以与其他工具产生协同作用，并且它们的热度使得在 StackOverflow 上寻找错误变得更容易。举个栗子，偏离标准，比如实现自己的轻量级路由，一开始似乎是个好主意，但从长远来看，它肯定会导致比解决的问题更多的问题。</p><p>本期话题是 —— 你有什么小众但好用的 Vue 工具人推荐吗？</p><p>欢迎在本文下方自由言论，文明共享。谢谢大家的点赞，掰掰~</p><p><strong>《前端猫猫教》每日 9 点半更新，坚持阅读，自律打卡，每天一次，进步一点</strong></p>",
    "id": 22584803322707,
    "lookNum": 4280
  },
  {
    "title": "2024 Vue 生态工具推荐",
    "label": [
      "VUE",
      "UNIAPP",
      "HTML5",
      "CSS"
    ],
    "time": "2024-03-19 01:07:34",
    "uptime": "2024-03-19 01:07:34",
    "creator": "风中追风",
    "type": "recommend",
    "abstract": "在没有任何遗留限制的情况下从零启动一个项目可能会令人鸡冻，但也会令人头大。不受限制地自由构建 App 可能会导致浪费大量时间研究和评估工具，最终会分散实际工作的注意力。即使做出了最好的选择，也总会重新考虑备胎方案，这就是“选择的悖论”。",
    "logo": "https://img0.baidu.com/it/u=997342582,3717676421&fm=253&fmt=auto&app=138&f=JPEG?w=1140&h=475",
    "content": "<p><br></p><p>本期共享的是 —— Vue 生态系统中的所有行业标准工具。</p><h2>包管理器</h2><p>处理外部包的人气工具有 3 种：</p><ul><li><code>npm</code></li><li><code>yarn</code></li><li><code>pnpm</code></li></ul><p><code>npm</code> 又老又慢。<code>yarn</code> 速度更快，是一个可靠的选择。但总体而言，<code>pnpm</code> 天下第一，它速度极快且节省空间。<code>pnpm</code> 在许多地方使用每段代码，而不需要额外的副本。此外，<code>pnpm</code> 本身支持具有最少配置的 monorepo 设置。</p><p>个人建议：包管理器优先选择 <code>pnpm</code></p><h2>构建工具</h2><p>在这里推荐 Vite 应该不足为奇。Vite 使用原生 ES 模块，实现快如闪电的服务器启动。Vite 具有内置的热模块替换支持，而且还通过 Rollup 优化生产构建，确保既小又快的加载打包。此外，与其他备胎方案相比，Vite 配置要容易得多。最后，Vite 因为与框架无关而获得加分。</p><p>个人推荐：构建工具优先选择 <code>Vite</code></p><h2>Vue 版本</h2><p>Vue 2 文档在搜索引擎和 Stackoverflow 中的排名仍然高举不下，如果我们必须在版本之间进行选择，这可能会令人头大。但粉丝请记住，Vue 2 不再开源维护，Vue 3 现在是长期支持的版本。Vue 3 具有先前版本的所有优点，但具有利用组合式 API 的不同语法。</p><p>个人建议：Vue 版本优先选择 Vue 3</p><h2>SFC（单文件组件）</h2><p>将组件的所有构建块保留在同一个位置是 Vue 的一大特色，SFC = 模板 + 样式 + 脚本。如果您认为某个组件变得又臭又长，那么最好将其拆分为子组件。我们仍然可以为每个部分使用不同的文件，但请不要这样做。</p><p>个人建议：优先选用 SFC</p><h2>路由</h2><p>Vue 有一个官方的路由模块，它与 Vue 内核深度集成，这使构建 SPA（单页应用程序）变得轻而易举。</p><p>一些给力的功能包括嵌套和动态路由、基于模块化组件的配置、路由参数、过渡效果、与自动活动 CSS 类的链接、HTML5 <code>history</code> 模式或哈希模式，以及可自定义的滚动行为。</p><p>由于缺乏替代品，Vue Router 无法获得应有的宣传和荣誉，但它确实是一个极其强大且功能齐全的库。</p><p>个人建议：优先选用 Vue Router</p><h2>状态管理</h2><p>这可能有点令人头大，因为在 Pinia 取代 Vuex 之前，Vuex 多年来一直是官方推荐。Pinia 是从零开始编写的，与 Vue 3 的组合式 API 架构无缝集成。Pinia 现在是状态管理的官方推荐。</p><p>Pinia 的唯一真正替代方案是使用自定义组合式函数来保存我们的状态。对于迷你 App 而言，这可能是一个不错的解决方案，但由于 Pinia 遵循相同的架构，具有很小的占用空间、增强的性能和开发工具支持，因此被强烈推荐。</p><p>个人建议：优先使用 Pinia</p><h2>数据请求</h2><p>原生 <code>fetch</code> 已经获得了重要的浏览器支持，这被认为是人气爆棚的 axios 库的替代品。VueUse 还提供了带有更高级配置选项的 <code>useFetch</code> 钩子。</p><p>但我强烈推荐的是 <code>vue-query</code>。它使用声明性语法简化了数据请求，并优雅地处理一大坨重复性任务，比如加载和错误状态、分页、过滤、排序和缓存。</p><p>个人建议：数据请求优先选择 Vue Query</p><h2>组件营销</h2><p>我确信还有其他选择，但 Storybook 占据主导地位，以至于其他所有选项都不在本人的考虑范围内。真正的问题是 Storybook 是否值得大肆宣传。</p><p>就我个人而言，我确实喜欢使用它来单独开发组件。Storybook 速度更快，让我了解组件的每个依赖。此外，它可以是一种很好的文档形式。</p><p>个人建议：组件文档优先选择 Storybook</p><h2>测试</h2><p>测试问题本身就可以写成一篇文章。我将重点关注我认为对任何 App 单元测试、e2e（端到端测试）和可视化测试都至关重要的测试类型。</p><h3>单元测试</h3><p>到目前为止，所有建议均来自我的个人经验。所以 Jest 就是我在本节中应该推荐的内容。它是一款既给力又可靠的测试运行器，我对它非常满意。</p><p>但有一个工具我还没有机会测试。Vitest 是一个由 Vite 驱动的测试运行器，具有兼容 Jest 的语法，我认识的每个人都支持它。所以我必须选择它作为推荐。</p><p>个人建议：单元测试优先选择 Vitest</p><h3>端到端测试</h3><p>使用 Cypress，它不仅是人气最高的选项，而且最新版本在稳定性和消除不稳定方面投入了大量精力。除了成为对开发者最友好的工具之外，它还使其成为 e2e 测试的最佳选择。</p><p>另一种选择是 Playwright，总体上可能会更快一些，但对我来说，采用率和生态系统还不够大，不足以在我的管道中得到信任。</p><p>个人建议：端到端测试优先选择 Cypress</p><h3>可视化测试</h3><p>这个难以抉择。我目前正在使用 Applitools，并且我非常了解良好的可视化测试套件的重要性。虽然但是，多用户环境中的冲突解决是极其痛苦的，并且绝对可以改进。</p><p>我的建议肯定是拥​​有一个可视化测试套件，我保证当我的工作流程不再让我头大时，我会带着一个特定的工具回来。</p><p>个人建议：你开心就好</p><h2>UI 框架</h2><p>我甚至不记得我最后一次使用 UI 框架的愉快经历。而且可能它并不在 Vue 世界中。选择很多，但问题也很多。配置地狱、臃肿的实现、糟糕的性能和内存泄漏等等。这就是为什么我当前建议在无头组件库之上进行自定义实现。在 Vue 世界中，这意味着 shadcn-vue 构建在 radix-vue 之上。这不是一个我们可以立即安装并开始使用的库。我们需要努力使其适应我们的风格指南，对我来说，这是一件好事。</p><p>根据记录，如果您想要开箱即用的 UI 库，若干人气爆棚的选项包括但不限于：</p><ul><li>Vuetify</li><li>Element UI</li><li>Quasar Framework</li></ul><p>个人建议：UI 框架优先选择 shadcn-vue 和 radix-vue</p><h2>静态类型</h2><p>毋庸置疑，这个话题的争议性比超乎我的想象。我知道 TS 很容易被滥用，并剥夺编程的乐趣，但私以为如果 TS 使用得当，它可以增强我们作为程序员阅读代码的主要角色。强烈推荐批判性思维和 TSLint。</p><p>个人建议：静态类型优先选择 TS</p><h2>IDE（集成开发环境）</h2><p>有两个人气爆棚且平分秋色的选择：IntelliJ 和 VSCode。IntelliJ 不是免费的，但 Vue 是开箱即用的支持，而 VSCode 是免费且开源的，但需要额外的配置。如果您更喜欢 VSCode，请确保安装 Volar 和 TypeScript Vue Plugin（Volar），增强开发体验。</p><p>个人建议：IDE 优先选择 IntelliJ 或 VSCode</p><h2>API文档</h2><p>Swagger 是迄今为止人气最高的选择。它基于 OpenAPI 规范，可以轻松地与其他开发者共享 API 文档。这是一个成熟且得到良好支持的项目，背后有一个庞大的社区。</p><p>个人建议：API 文档优先选择 Swagger</p><h2>结语</h2><p>这些都是我在 2024 年使用 Vue 构建可扩展 App 的个人建议。机智如你可能已经察觉，大部分情况下我都喜欢坚持行业标准。私以为这可以与其他工具产生协同作用，并且它们的热度使得在 StackOverflow 上寻找错误变得更容易。举个栗子，偏离标准，比如实现自己的轻量级路由，一开始似乎是个好主意，但从长远来看，它肯定会导致比解决的问题更多的问题。</p><p>本期话题是 —— 你有什么小众但好用的 Vue 工具人推荐吗？</p><p>欢迎在本文下方自由言论，文明共享。谢谢大家的点赞，掰掰~</p><p><strong>《前端猫猫教》每日 9 点半更新，坚持阅读，自律打卡，每天一次，进步一点</strong></p>",
    "id": 17433839379359,
    "lookNum": 3210
  },
  {
    "title": "也谈一下 30+ 程序员的出路",
    "label": [
      "谁的青春不迷茫",
      "代码人生",
      "人生思考"
    ],
    "time": "2024-03-19 03:41:55",
    "uptime": "2024-03-19 03:41:55",
    "creator": "风中追风",
    "type": "rencetly",
    "abstract": "前两天和一个前端同学聊天，他说不准备再做前端了，准备去考公。不过难度也很大。",
    "logo": "https://inews.gtimg.com/newsapp_bt/0/11427727909/641.jpg",
    "content": "<p><br></p><p>从 2015 2016 年那会儿开始互联网行业爆发，到现在有 7、8 年了，当年 20 多岁的小伙子们，现在也都 30+ 了</p><p>大量的人面临这个问题：大龄程序员就业竞争力差，未来该如何安身立命？</p><p>先说我个人的看法：</p><ul><li>除非你有其他更好的资源，否则没有更好的出路</li><li>认真搞技术，保持技术能力，你大概率不会失业（至少外包还在招人，外包也不少挣...）</li></ul><h2>考公之我见</h2><p>如果真的上岸了，极大概率不会失业，这是最大的优势。</p><p>有优势肯定也有劣势，要考虑全面。凡事都符合能量守恒定律。</p><p>你得到什么，你就得付出什么。或者你爸爸、爷爷提前付出为你过了，或者你儿子、孙子到最后为你买单。</p><p>任何一个企业、单位，无论什么形式，无论效率高低，总是需要人干活的，甚至有很多脏活累活。</p><p>你有依靠当然好。但你如果孤零零的进去，这些活你猜会是谁干？</p><p>什么，努力就一定能有收获？—— 对，肯定有收货。但收件人不一定是谁。（也符合能量守恒定律）</p><h2>转岗，转什么？</h2><p>去干产品经理，那不跟程序员一样吗？只是不写代码了而已。文档，不一定就比代码好写。</p><p>努力晋升转管理岗，那得看公司有没有坑。当下环境中，公司业务不增长的话，也不可能多出管理岗位。</p><p>其他没啥可转的岗位了，总不能转岗做 HR 吧~ 木讷的程序员也干不了 HR 。</p><h2>副业，红利期早已过去</h2><p>做自媒体，做讲师，红利期早就过去了。我去年开始在某音上做小视频，到现在也就积累不到 2000 粉丝，播放量非常少。</p><p>接外包，这得看你本事了。这不单单是一个技术活，你这是一个人干了一个公司所有角色的活：推广、需求、解决方案、开发、测试、部署、维护、升级…</p><p>不过，虽然现在副业情况不好，但我还是建议大家，在业余时候多输出技术内容（博客、视频、开源等），看能否积累一些流量和粉丝。以后说不定副业情况会好起来，到时候你临时抱佛脚可来不及。</p><h2>回归二线城市</h2><p>相比于一线城市的互联网公司，二线城市对于年龄的容忍度更高一些。我认识很多 35-40 岁的人，在二线城市做开发工作也非常稳定。</p><p>在二线城市最好能找一个传统行业的软件公司，如做医疗，财务，税务，制造业等软件产品的。这种软件的特点是，不要求有多么高精尖的技术，也不要求什么大数据、极致性能，它对业务流程和功能的依赖更多一些。你只要能尽快把业务功能熟悉起来（挺多专业知识，不是那么容易的），你在公司就基本稳定了，不用去卷技术。</p><p>二线城市是非常适合安家定居的。房价便宜，生活节奏慢 —— 当然，工资也会相对低一些。</p><p>另外，回归二线城市也不是说走就走的，你得提前准备、规划，把路铺好。</p><blockquote>前端人员转型全栈开发，我用 Node 全栈开发 AIGC 项目</blockquote><h2>总结</h2><p>当前互联网、软件行业，已经没有了前些年的增量，但依然有大量的存量，依然需要大量技术人员去维护当前的系统和功能。</p><p>所以别总想着去转行（除非有其他好的资源），其他行业也不会留着好位子等着你。有那个精力多给自己充充电，有竞争力是不会失业的。只要互联网和软件行业还存在，就一直需要前端工作。<br></p>",
    "id": 7281921563597,
    "lookNum": 4336
  },
  {
    "title": "转岗，转什么？副业，红利期早已过去",
    "label": [
      "谁的青春不迷茫",
      "代码人生",
      "人生思考"
    ],
    "time": "2024-03-19 03:43:13",
    "uptime": "2024-03-19 03:57:26",
    "creator": "风中追风",
    "type": "life",
    "abstract": "努力晋升转管理岗，那得看公司有没有坑。当下环境中，公司业务不增长的话，也不可能多出管理岗位。",
    "logo": "https://img1.baidu.com/it/u=3882273133,2892675620&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=321",
    "content": "<p><br></p><p>从 2015 2016 年那会儿开始互联网行业爆发，到现在有 7、8 年了，当年 20 多岁的小伙子们，现在也都 30+ 了</p><p>大量的人面临这个问题：大龄程序员就业竞争力差，未来该如何安身立命？</p><p>先说我个人的看法：</p><ul><li>除非你有其他更好的资源，否则没有更好的出路</li><li>认真搞技术，保持技术能力，你大概率不会失业（至少外包还在招人，外包也不少挣...）</li></ul><h2>考公之我见</h2><p>如果真的上岸了，极大概率不会失业，这是最大的优势。</p><p>有优势肯定也有劣势，要考虑全面。凡事都符合能量守恒定律。</p><p>你得到什么，你就得付出什么。或者你爸爸、爷爷提前付出为你过了，或者你儿子、孙子到最后为你买单。</p><p>任何一个企业、单位，无论什么形式，无论效率高低，总是需要人干活的，甚至有很多脏活累活。</p><p>你有依靠当然好。但你如果孤零零的进去，这些活你猜会是谁干？</p><p>什么，努力就一定能有收获？—— 对，肯定有收货。但收件人不一定是谁。（也符合能量守恒定律）</p><h2>转岗，转什么？</h2><p>去干产品经理，那不跟程序员一样吗？只是不写代码了而已。文档，不一定就比代码好写。</p><p>努力晋升转管理岗，那得看公司有没有坑。当下环境中，公司业务不增长的话，也不可能多出管理岗位。</p><p>其他没啥可转的岗位了，总不能转岗做 HR 吧~ 木讷的程序员也干不了 HR 。</p><h2>副业，红利期早已过去</h2><p>做自媒体，做讲师，红利期早就过去了。我去年开始在某音上做小视频，到现在也就积累不到 2000 粉丝，播放量非常少。</p><p>接外包，这得看你本事了。这不单单是一个技术活，你这是一个人干了一个公司所有角色的活：推广、需求、解决方案、开发、测试、部署、维护、升级…</p><p>不过，虽然现在副业情况不好，但我还是建议大家，在业余时候多输出技术内容（博客、视频、开源等），看能否积累一些流量和粉丝。以后说不定副业情况会好起来，到时候你临时抱佛脚可来不及。</p><h2>回归二线城市</h2><p>相比于一线城市的互联网公司，二线城市对于年龄的容忍度更高一些。我认识很多 35-40 岁的人，在二线城市做开发工作也非常稳定。</p><p>在二线城市最好能找一个传统行业的软件公司，如做医疗，财务，税务，制造业等软件产品的。这种软件的特点是，不要求有多么高精尖的技术，也不要求什么大数据、极致性能，它对业务流程和功能的依赖更多一些。你只要能尽快把业务功能熟悉起来（挺多专业知识，不是那么容易的），你在公司就基本稳定了，不用去卷技术。</p><p>二线城市是非常适合安家定居的。房价便宜，生活节奏慢 —— 当然，工资也会相对低一些。</p><p>另外，回归二线城市也不是说走就走的，你得提前准备、规划，把路铺好。</p><blockquote>前端人员转型全栈开发，我用 Node 全栈开发 AIGC 项目</blockquote><h2>总结</h2><p>当前互联网、软件行业，已经没有了前些年的增量，但依然有大量的存量，依然需要大量技术人员去维护当前的系统和功能。</p><p>所以别总想着去转行（除非有其他好的资源），其他行业也不会留着好位子等着你。有那个精力多给自己充充电，有竞争力是不会失业的。只要互联网和软件行业还存在，就一直需要前端工作。<br></p>",
    "id": 60101455073577,
    "lookNum": 6226
  },
  {
    "title": "也谈一下 30+ 程序员的出路",
    "label": [
      "谁的青春不迷茫",
      "代码人生",
      "人生思考"
    ],
    "time": "2024-03-19 03:43:58",
    "uptime": "2024-03-19 03:43:58",
    "creator": "风中追风",
    "type": "life",
    "abstract": "前两天和一个前端同学聊天，他说不准备再做前端了，准备去考公。不过难度也很大。",
    "logo": "https://inews.gtimg.com/newsapp_bt/0/11427727909/641.jpg",
    "content": "<p><br></p><p>从 2015 2016 年那会儿开始互联网行业爆发，到现在有 7、8 年了，当年 20 多岁的小伙子们，现在也都 30+ 了</p><p>大量的人面临这个问题：大龄程序员就业竞争力差，未来该如何安身立命？</p><p>先说我个人的看法：</p><ul><li>除非你有其他更好的资源，否则没有更好的出路</li><li>认真搞技术，保持技术能力，你大概率不会失业（至少外包还在招人，外包也不少挣...）</li></ul><h2>考公之我见</h2><p>如果真的上岸了，极大概率不会失业，这是最大的优势。</p><p>有优势肯定也有劣势，要考虑全面。凡事都符合能量守恒定律。</p><p>你得到什么，你就得付出什么。或者你爸爸、爷爷提前付出为你过了，或者你儿子、孙子到最后为你买单。</p><p>任何一个企业、单位，无论什么形式，无论效率高低，总是需要人干活的，甚至有很多脏活累活。</p><p>你有依靠当然好。但你如果孤零零的进去，这些活你猜会是谁干？</p><p>什么，努力就一定能有收获？—— 对，肯定有收货。但收件人不一定是谁。（也符合能量守恒定律）</p><h2>转岗，转什么？</h2><p>去干产品经理，那不跟程序员一样吗？只是不写代码了而已。文档，不一定就比代码好写。</p><p>努力晋升转管理岗，那得看公司有没有坑。当下环境中，公司业务不增长的话，也不可能多出管理岗位。</p><p>其他没啥可转的岗位了，总不能转岗做 HR 吧~ 木讷的程序员也干不了 HR 。</p><h2>副业，红利期早已过去</h2><p>做自媒体，做讲师，红利期早就过去了。我去年开始在某音上做小视频，到现在也就积累不到 2000 粉丝，播放量非常少。</p><p>接外包，这得看你本事了。这不单单是一个技术活，你这是一个人干了一个公司所有角色的活：推广、需求、解决方案、开发、测试、部署、维护、升级…</p><p>不过，虽然现在副业情况不好，但我还是建议大家，在业余时候多输出技术内容（博客、视频、开源等），看能否积累一些流量和粉丝。以后说不定副业情况会好起来，到时候你临时抱佛脚可来不及。</p><h2>回归二线城市</h2><p>相比于一线城市的互联网公司，二线城市对于年龄的容忍度更高一些。我认识很多 35-40 岁的人，在二线城市做开发工作也非常稳定。</p><p>在二线城市最好能找一个传统行业的软件公司，如做医疗，财务，税务，制造业等软件产品的。这种软件的特点是，不要求有多么高精尖的技术，也不要求什么大数据、极致性能，它对业务流程和功能的依赖更多一些。你只要能尽快把业务功能熟悉起来（挺多专业知识，不是那么容易的），你在公司就基本稳定了，不用去卷技术。</p><p>二线城市是非常适合安家定居的。房价便宜，生活节奏慢 —— 当然，工资也会相对低一些。</p><p>另外，回归二线城市也不是说走就走的，你得提前准备、规划，把路铺好。</p><blockquote>前端人员转型全栈开发，我用 Node 全栈开发 AIGC 项目</blockquote><h2>总结</h2><p>当前互联网、软件行业，已经没有了前些年的增量，但依然有大量的存量，依然需要大量技术人员去维护当前的系统和功能。</p><p>所以别总想着去转行（除非有其他好的资源），其他行业也不会留着好位子等着你。有那个精力多给自己充充电，有竞争力是不会失业的。只要互联网和软件行业还存在，就一直需要前端工作。<br></p>",
    "id": 29206743575298,
    "lookNum": 3742
  },
  {
    "title": "考公之我见",
    "label": [
      "谁的青春不迷茫",
      "代码人生",
      "我的青葱岁月"
    ],
    "time": "2024-03-19 03:47:30",
    "uptime": "2024-03-19 03:57:47",
    "creator": "风中追风",
    "type": "life",
    "abstract": "你得到什么，你就得付出什么。或者你爸爸、爷爷提前付出为你过了，或者你儿子、孙子到最后为你买单。 任何一个企业、单位，无论什么形式，无论效率高低，总是需要人干活的，甚至有很多脏活累活。 你有依靠当然好。但你如果孤零零的进去，这些活你猜会是谁干？",
    "logo": "https://wx4.sinaimg.cn/orj480/9c776629ly1hd3qlyl1wzj20u0140tjm.jpg",
    "content": "<p><br></p><p>从 2015 2016 年那会儿开始互联网行业爆发，到现在有 7、8 年了，当年 20 多岁的小伙子们，现在也都 30+ 了</p><p>大量的人面临这个问题：大龄程序员就业竞争力差，未来该如何安身立命？</p><p>先说我个人的看法：</p><ul><li>除非你有其他更好的资源，否则没有更好的出路</li><li>认真搞技术，保持技术能力，你大概率不会失业（至少外包还在招人，外包也不少挣...）</li></ul><h2>考公之我见</h2><p>如果真的上岸了，极大概率不会失业，这是最大的优势。</p><p>有优势肯定也有劣势，要考虑全面。凡事都符合能量守恒定律。</p><p>你得到什么，你就得付出什么。或者你爸爸、爷爷提前付出为你过了，或者你儿子、孙子到最后为你买单。</p><p>任何一个企业、单位，无论什么形式，无论效率高低，总是需要人干活的，甚至有很多脏活累活。</p><p>你有依靠当然好。但你如果孤零零的进去，这些活你猜会是谁干？</p><p>什么，努力就一定能有收获？—— 对，肯定有收货。但收件人不一定是谁。（也符合能量守恒定律）</p><h2>转岗，转什么？</h2><p>去干产品经理，那不跟程序员一样吗？只是不写代码了而已。文档，不一定就比代码好写。</p><p>努力晋升转管理岗，那得看公司有没有坑。当下环境中，公司业务不增长的话，也不可能多出管理岗位。</p><p>其他没啥可转的岗位了，总不能转岗做 HR 吧~ 木讷的程序员也干不了 HR 。</p><h2>副业，红利期早已过去</h2><p>做自媒体，做讲师，红利期早就过去了。我去年开始在某音上做小视频，到现在也就积累不到 2000 粉丝，播放量非常少。</p><p>接外包，这得看你本事了。这不单单是一个技术活，你这是一个人干了一个公司所有角色的活：推广、需求、解决方案、开发、测试、部署、维护、升级…</p><p>不过，虽然现在副业情况不好，但我还是建议大家，在业余时候多输出技术内容（博客、视频、开源等），看能否积累一些流量和粉丝。以后说不定副业情况会好起来，到时候你临时抱佛脚可来不及。</p><h2>回归二线城市</h2><p>相比于一线城市的互联网公司，二线城市对于年龄的容忍度更高一些。我认识很多 35-40 岁的人，在二线城市做开发工作也非常稳定。</p><p>在二线城市最好能找一个传统行业的软件公司，如做医疗，财务，税务，制造业等软件产品的。这种软件的特点是，不要求有多么高精尖的技术，也不要求什么大数据、极致性能，它对业务流程和功能的依赖更多一些。你只要能尽快把业务功能熟悉起来（挺多专业知识，不是那么容易的），你在公司就基本稳定了，不用去卷技术。</p><p>二线城市是非常适合安家定居的。房价便宜，生活节奏慢 —— 当然，工资也会相对低一些。</p><p>另外，回归二线城市也不是说走就走的，你得提前准备、规划，把路铺好。</p><blockquote>前端人员转型全栈开发，我用 Node 全栈开发 AIGC 项目</blockquote><h2>总结</h2><p>当前互联网、软件行业，已经没有了前些年的增量，但依然有大量的存量，依然需要大量技术人员去维护当前的系统和功能。</p><p>所以别总想着去转行（除非有其他好的资源），其他行业也不会留着好位子等着你。有那个精力多给自己充充电，有竞争力是不会失业的。只要互联网和软件行业还存在，就一直需要前端工作。<br></p>",
    "id": 42268390205096,
    "lookNum": 2340
  },
  {
    "title": "2024年令人眼前一亮的Web框架",
    "label": [
      "JAVASCRIPT",
      "NEXTJS",
      "NUSTJS",
      "ANGULAR"
    ],
    "time": "2024-03-19 03:48:42",
    "uptime": "2024-03-19 03:48:42",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "2024年正向我们走来，我们怀着满腔热情为新的一年制定计划，探索未来一年可以学习或实现的目标。此时此刻，正是探寻来年值得学习的框架、理解其功能和特色的最佳时刻。我们以2023年JS 新星名单为指引，力求保持客观公正的态度。对于每一个特色框架，我们都将突出其最大的优势，使您能够全面理解它们的优点，从而选择适合自己的框架进行尝试！   作者：腾讯TNTWeb前端团队 链接：https://juejin.cn/post/7339830464000213027 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
    "logo": "https://pic.vjshi.com/2021-09-16/816586c10c974033982559cc1efbf52c/00003.jpg?x-oss-process=style/watermark",
    "content": "<p><br></p><p>为谁而设：</p><ul><li>你希望减少JavaScript的编写量</li><li>你希望代码更简单，以超媒体为中心</li></ul><p>HTMX在2023年迅速走红，过去一年间在GitHub上赢得了大量星标。HTMX并非普通的JS框架。如果你使用HTMX，你将大部分时间都花在超媒体的世界中，以与我们通常对现代Web开发的JS密集型视角完全不同的视角看待Web开发。<strong>HTMX利用HATEOAS（Hypermedia作为应用程序状态的引擎）的概念，使开发人员能够直接从HTML访问浏览器功能，而不是使用Javascript。</strong></p><p>此外，它还证明了通过发布令人惊叹的表情符号并以口碑作为主要营销手段，你可以获得人气和认可。不仅如此，你还可能成为HTMX的CEO！它吸引了许多开发人员尝试这种构建网站的方法，并重新思考他们当前的实践。所有这些都使2024年对于这个库的未来发展充满了激动人心的可能性。</p><h2>Wasp - 全栈，开箱即用🚀</h2><p>为谁而设：</p><ul><li>你希望快速构建全栈应用</li><li>你希望在一个出色的一体化解决方案中继续使用React和Node.js，而无需手动挑选堆栈的每一部分</li><li>你希望获得一个为React和Node.js预配置的免费SaaS模板—— <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwasp-lang%2Fopen-saas\" target=\"_blank\">Open SaaS</a></li></ul><p>对于希望简单轻松地全面控制其堆栈的工具的用户，无需再寻找！<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwasp-lang%2Fwasp\" target=\"_blank\">Wasp</a>是一个有主见的全栈框架，利用其编译器以快速简便的方式为你的应用创建数据库、后端和前端。它使用React、Node.js和Prisma，这些都是全栈Web开发人员正在使用的一些最著名的工具。</p><p>Wasp的核心是main.wasp文件，它作为你大部分需求的一站式服务。在其中，你可以定义：</p><ul><li>全栈身份验证</li><li>数据库架构</li><li>异步作业，无需额外的基础设施</li><li>简单且灵活的部署</li><li>全栈类型安全</li><li>发送电子邮件（Sendgrid、MailGun、SMTP服务器等）</li><li>等等……</li></ul><p>最酷的事情是？经过编译器步骤后，你的Wasp应用程序的输出是一个标准的React + Vite前端、Node.js后端和PostgreSQL数据库。从那里，你可以使用单个命令轻松将一切部署到Fly.io等平台。</p><p>尽管有些人可能会认为Wasp的有主见立场是负面的，但它却是Wasp众多全栈功能的驱动力。使用Wasp，单个开发人员或小型团队启动全栈项目变得更加容易，尤其是如果你使用预制的模板或OpenSaaS作为你的SaaS起点。由于项目的核心是定义明确的，因此开始一个项目并可能在几天内创建自己的全栈SaaS变得非常容易！</p><p><strong>此外，还有一点很酷的是，大多数Web开发人员对大多数现有技术的预先存在的知识仍然在这里适用，因为Wasp使用的技术已经成熟。</strong></p><h2>Solid.js - 一流的reactivity库 ↔️</h2><p>适合人群：</p><ul><li>如果你希望代码具有高响应性</li><li>现有的React开发人员，希望尝试一种对他们来说学习曲线较低的高性能工具</li></ul><p>Solid.js是一个性能很高的Web框架，与React有一些相似之处。例如，两者都使用JSX，采用基于函数的组件方法，但Solid.js不使用虚拟DOM，而是将你的代码转换为纯JavaScript。然而，Solid.js因其利用信号、备忘录和效果实现细粒度响应性的方法而更加出名。信号是Solid.js中最简单、最知名的基本元素。它们包含值及其获取和设置函数，使框架能够观察并在DOM中的确切位置按需更新更改，这与React重新渲染整个组件的方式不同。</p><p>Solid.js不仅使用JSX，还对其进行了增强。它提供了一些很酷的新功能，例如Show组件，它可以启用JSX元素的条件渲染，以及For组件，它使在JSX中更轻松地遍历集合变得更容易。另一个重要的是，它还有一个名为Solid Start的元框架（目前处于测试版），它使用户能够根据自己的喜好，使用基于文件的路由、操作、API路由和中间件等功能，以不同的方式渲染应用程序。</p><h2>Astro - 静态网站之王👑</h2><p>适合人群：</p><ul><li>如果您需要一款优秀的博客、CMS重型网站工具</li><li>需要一个能够集成其他库和框架的框架</li></ul><p>如果您在2023年构建了一个内容驱动的网站，那么很有可能您选择了Astro作为首选框架来实现这一目标！Astro是另一个使用不同架构概念来脱颖而出的框架。对于Astro来说，这是岛屿架构。在Astro的上下文中，岛屿是页面上的任何交互式UI组件，与静态内容的大海形成鲜明对比。由于这些岛屿彼此独立运行，因此页面可以有任意数量的岛屿，但它们也可以共享状态并相互通信，这非常有用。</p><p><strong>关于Astro的另一个有趣的事情是，他们的方法使用户能够使用不同的前端框架，如React、Vue、Solid来构建他们的网站。因此，开发人员可以轻松地在其当前知识的基础上构建网站，并利用可以集成到Astro网站中的现有组件。</strong></p><h2>Svelte - 简单而有效🎯</h2><p>适合人群：</p><ul><li>您希望学习一个简单易上手的框架</li><li>追求简洁且代码执行速度快的开发体验</li></ul><p><strong>Svelte是另一个尝试通过尽可能直接和初学者友好的方式来简化和加速Web开发的框架。它是一个很容易学习的框架，因为要使一个属性具有响应性，您只需声明它并在HTML模板中使用它。</strong> 每当在JavaScript中程序化地更新值时（例如，通过触发onClick事件按钮），它将在UI上反映出来，反之亦然。</p><p>Svelte的下一步将是引入runes。runes将是Svelte处理响应性的方式，使处理大型应用程序变得更加容易。类似于Solid.js的信号，符文通过使用类似函数的语句提供了一种直接访问应用程序响应性状态的方式。与Svelte当前的工作方式相比，它们将允许用户精确定义整个脚本中哪些部分是响应性的，从而使组件更加高效。类似于Solid和Solid Start，Svelte也有其自己的框架，称为SvelteKit。SvelteKit为用户提供了一种快速启动其由Vite驱动的Svelte应用程序的方式。它提供了路由器、构建优化、不同的渲染和预渲染方式、图像优化等功能。</p><h2>Qwik - 非常快🚤</h2><p>适合人群：</p><ul><li>如果您想要一个高性能的Web应用</li><li>现有的React开发人员，希望尝试一种高性能且学习曲线平缓的框架</li></ul><p>最后一个但同样重要的框架是Qwik。<strong>Qwik是另一个利用JSX和函数组件的框架，类似于Solid.js，为基于React的开发人员提供了一个熟悉的环境，以便尽快上手。正如其名字所表达的，Qwik的主要目标是实现您应用程序的最高性能和最快执行速度。</strong></p><p>Qwik通过利用可恢复性（resumability）的概念来实现其速度。简而言之，可恢复性基于在服务器上暂停执行并在客户端上恢复执行而无需重新播放和下载全部应用程序逻辑的想法。这是通过延迟JavaScript代码的执行和下载来实现的，除非有必要处理用户交互，这是一件非常棒的事情。它使整体速度提高，并将带宽降低到绝对最小值，从而实现近乎瞬间的加载。</p><h2>结论</h2><p>在我们所提及的所有框架和库中，最大的共同点是它们的熟悉度。每个框架和库都试图以构建在当前知识基础上的方式吸引潜在的新开发者，而不是做一些全新的事情，这是一个非常棒的理念。</p><p>当然，还有许多我们未在整篇文章中提及但值得一提的库和框架。例如，Angular 除了新的标志和文档外，还包括信号和新的控制流。还有 Remix，它增加了对 Vite、React Server Components 和新的 Remix SPA 模式的支持。最后，我们不能忘记 Next.js，它在过去几年中已成为 React 开发者的默认选择，为新的 React 功能铺平了道路。<br></p><p>作者：腾讯TNTWeb前端团队<br>链接：https://juejin.cn/post/7339830464000213027<br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p><br></p><p><br></p><p><br></p><p><br></p><ul><li></li></ul><p><br></p>",
    "id": 31124290466930,
    "lookNum": 2011
  },
  {
    "title": "2024年令人眼前一亮的Web框架",
    "label": [
      "JAVASCRIPT",
      "NEXTJS",
      "NUSTJS",
      "ANGULAR"
    ],
    "time": "2024-03-19 03:49:03",
    "uptime": "2024-03-19 03:49:03",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "2024年正向我们走来，我们怀着满腔热情为新的一年制定计划，探索未来一年可以学习或实现的目标。此时此刻，正是探寻来年值得学习的框架、理解其功能和特色的最佳时刻。我们以2023年JS 新星名单为指引，力求保持客观公正的态度。对于每一个特色框架，我们都将突出其最大的优势，使您能够全面理解它们的优点，从而选择适合自己的框架进行尝试！   作者：腾讯TNTWeb前端团队 链接：https://juejin.cn/post/7339830464000213027 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
    "logo": "https://pic.vjshi.com/2021-09-16/816586c10c974033982559cc1efbf52c/00003.jpg?x-oss-process=style/watermark",
    "content": "<p><br></p><p>为谁而设：</p><ul><li>你希望减少JavaScript的编写量</li><li>你希望代码更简单，以超媒体为中心</li></ul><p>HTMX在2023年迅速走红，过去一年间在GitHub上赢得了大量星标。HTMX并非普通的JS框架。如果你使用HTMX，你将大部分时间都花在超媒体的世界中，以与我们通常对现代Web开发的JS密集型视角完全不同的视角看待Web开发。<strong>HTMX利用HATEOAS（Hypermedia作为应用程序状态的引擎）的概念，使开发人员能够直接从HTML访问浏览器功能，而不是使用Javascript。</strong></p><p>此外，它还证明了通过发布令人惊叹的表情符号并以口碑作为主要营销手段，你可以获得人气和认可。不仅如此，你还可能成为HTMX的CEO！它吸引了许多开发人员尝试这种构建网站的方法，并重新思考他们当前的实践。所有这些都使2024年对于这个库的未来发展充满了激动人心的可能性。</p><h2>Wasp - 全栈，开箱即用🚀</h2><p>为谁而设：</p><ul><li>你希望快速构建全栈应用</li><li>你希望在一个出色的一体化解决方案中继续使用React和Node.js，而无需手动挑选堆栈的每一部分</li><li>你希望获得一个为React和Node.js预配置的免费SaaS模板—— <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwasp-lang%2Fopen-saas\" target=\"_blank\">Open SaaS</a></li></ul><p>对于希望简单轻松地全面控制其堆栈的工具的用户，无需再寻找！<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fwasp-lang%2Fwasp\" target=\"_blank\">Wasp</a>是一个有主见的全栈框架，利用其编译器以快速简便的方式为你的应用创建数据库、后端和前端。它使用React、Node.js和Prisma，这些都是全栈Web开发人员正在使用的一些最著名的工具。</p><p>Wasp的核心是main.wasp文件，它作为你大部分需求的一站式服务。在其中，你可以定义：</p><ul><li>全栈身份验证</li><li>数据库架构</li><li>异步作业，无需额外的基础设施</li><li>简单且灵活的部署</li><li>全栈类型安全</li><li>发送电子邮件（Sendgrid、MailGun、SMTP服务器等）</li><li>等等……</li></ul><p>最酷的事情是？经过编译器步骤后，你的Wasp应用程序的输出是一个标准的React + Vite前端、Node.js后端和PostgreSQL数据库。从那里，你可以使用单个命令轻松将一切部署到Fly.io等平台。</p><p>尽管有些人可能会认为Wasp的有主见立场是负面的，但它却是Wasp众多全栈功能的驱动力。使用Wasp，单个开发人员或小型团队启动全栈项目变得更加容易，尤其是如果你使用预制的模板或OpenSaaS作为你的SaaS起点。由于项目的核心是定义明确的，因此开始一个项目并可能在几天内创建自己的全栈SaaS变得非常容易！</p><p><strong>此外，还有一点很酷的是，大多数Web开发人员对大多数现有技术的预先存在的知识仍然在这里适用，因为Wasp使用的技术已经成熟。</strong></p><h2>Solid.js - 一流的reactivity库 ↔️</h2><p>适合人群：</p><ul><li>如果你希望代码具有高响应性</li><li>现有的React开发人员，希望尝试一种对他们来说学习曲线较低的高性能工具</li></ul><p>Solid.js是一个性能很高的Web框架，与React有一些相似之处。例如，两者都使用JSX，采用基于函数的组件方法，但Solid.js不使用虚拟DOM，而是将你的代码转换为纯JavaScript。然而，Solid.js因其利用信号、备忘录和效果实现细粒度响应性的方法而更加出名。信号是Solid.js中最简单、最知名的基本元素。它们包含值及其获取和设置函数，使框架能够观察并在DOM中的确切位置按需更新更改，这与React重新渲染整个组件的方式不同。</p><p>Solid.js不仅使用JSX，还对其进行了增强。它提供了一些很酷的新功能，例如Show组件，它可以启用JSX元素的条件渲染，以及For组件，它使在JSX中更轻松地遍历集合变得更容易。另一个重要的是，它还有一个名为Solid Start的元框架（目前处于测试版），它使用户能够根据自己的喜好，使用基于文件的路由、操作、API路由和中间件等功能，以不同的方式渲染应用程序。</p><h2>Astro - 静态网站之王👑</h2><p>适合人群：</p><ul><li>如果您需要一款优秀的博客、CMS重型网站工具</li><li>需要一个能够集成其他库和框架的框架</li></ul><p>如果您在2023年构建了一个内容驱动的网站，那么很有可能您选择了Astro作为首选框架来实现这一目标！Astro是另一个使用不同架构概念来脱颖而出的框架。对于Astro来说，这是岛屿架构。在Astro的上下文中，岛屿是页面上的任何交互式UI组件，与静态内容的大海形成鲜明对比。由于这些岛屿彼此独立运行，因此页面可以有任意数量的岛屿，但它们也可以共享状态并相互通信，这非常有用。</p><p><strong>关于Astro的另一个有趣的事情是，他们的方法使用户能够使用不同的前端框架，如React、Vue、Solid来构建他们的网站。因此，开发人员可以轻松地在其当前知识的基础上构建网站，并利用可以集成到Astro网站中的现有组件。</strong></p><h2>Svelte - 简单而有效🎯</h2><p>适合人群：</p><ul><li>您希望学习一个简单易上手的框架</li><li>追求简洁且代码执行速度快的开发体验</li></ul><p><strong>Svelte是另一个尝试通过尽可能直接和初学者友好的方式来简化和加速Web开发的框架。它是一个很容易学习的框架，因为要使一个属性具有响应性，您只需声明它并在HTML模板中使用它。</strong> 每当在JavaScript中程序化地更新值时（例如，通过触发onClick事件按钮），它将在UI上反映出来，反之亦然。</p><p>Svelte的下一步将是引入runes。runes将是Svelte处理响应性的方式，使处理大型应用程序变得更加容易。类似于Solid.js的信号，符文通过使用类似函数的语句提供了一种直接访问应用程序响应性状态的方式。与Svelte当前的工作方式相比，它们将允许用户精确定义整个脚本中哪些部分是响应性的，从而使组件更加高效。类似于Solid和Solid Start，Svelte也有其自己的框架，称为SvelteKit。SvelteKit为用户提供了一种快速启动其由Vite驱动的Svelte应用程序的方式。它提供了路由器、构建优化、不同的渲染和预渲染方式、图像优化等功能。</p><h2>Qwik - 非常快🚤</h2><p>适合人群：</p><ul><li>如果您想要一个高性能的Web应用</li><li>现有的React开发人员，希望尝试一种高性能且学习曲线平缓的框架</li></ul><p>最后一个但同样重要的框架是Qwik。<strong>Qwik是另一个利用JSX和函数组件的框架，类似于Solid.js，为基于React的开发人员提供了一个熟悉的环境，以便尽快上手。正如其名字所表达的，Qwik的主要目标是实现您应用程序的最高性能和最快执行速度。</strong></p><p>Qwik通过利用可恢复性（resumability）的概念来实现其速度。简而言之，可恢复性基于在服务器上暂停执行并在客户端上恢复执行而无需重新播放和下载全部应用程序逻辑的想法。这是通过延迟JavaScript代码的执行和下载来实现的，除非有必要处理用户交互，这是一件非常棒的事情。它使整体速度提高，并将带宽降低到绝对最小值，从而实现近乎瞬间的加载。</p><h2>结论</h2><p>在我们所提及的所有框架和库中，最大的共同点是它们的熟悉度。每个框架和库都试图以构建在当前知识基础上的方式吸引潜在的新开发者，而不是做一些全新的事情，这是一个非常棒的理念。</p><p>当然，还有许多我们未在整篇文章中提及但值得一提的库和框架。例如，Angular 除了新的标志和文档外，还包括信号和新的控制流。还有 Remix，它增加了对 Vite、React Server Components 和新的 Remix SPA 模式的支持。最后，我们不能忘记 Next.js，它在过去几年中已成为 React 开发者的默认选择，为新的 React 功能铺平了道路。<br></p><p>作者：腾讯TNTWeb前端团队<br>链接：https://juejin.cn/post/7339830464000213027<br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p><br></p><p><br></p><p><br></p><p><br></p><ul><li></li></ul><p><br></p>",
    "id": 72851369095246,
    "lookNum": 1025
  },
  {
    "title": "坚持写作一年我赚了啥",
    "label": [
      "HTML5",
      "CSS",
      "JAVASCRIPT",
      "NEXTJS"
    ],
    "time": "2024-03-19 03:51:45",
    "uptime": "2024-03-19 03:51:45",
    "creator": "风中追风",
    "type": "tech",
    "abstract": "坚持写作了一年，一直就想总结下，看看自己到底写了啥？",
    "logo": "https://wx3.sinaimg.cn/mw690/5396ee05ly8hljl9hq9zlj20m90m9whx.jpg",
    "content": "<p><br></p><p>大家好啊，我是董董灿。</p><p>今天是 2023 年的最后一天，和大家一起来一个年终复盘，主题就是：2023年，我到底赚了多少？</p><p>今年除了工作之外，我的重点都放在了写文章上。截止到今天，已经在公众号上发布了 100+ 篇原创文章，在知乎上也发表了近 400 篇知乎问答。</p><p>同时，CSDN 和掘金社区也有涉及，甚至还获得了阿里云社区的专家博主。</p><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f209f33ec35c4ae9bc3bd1ff25fa1033~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1080&h=683&s=76376&e=jpg&b=b2ad9e\" alt=\"\" data-href=\"\" style=\"\"/></p><p>坚持写作了一年，一直就想总结下，看看自己到底写了啥？</p><p>正好今天在家无事，便研究了下微信公众平台的接口，利用接口抓取了部分发表的文章，再加上自己手动添加的文章内容，绘制了一个 2023 年创作文章的词云图。</p><p>果然不出所料: 我是一个 AI 算法博主。</p><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9be93292e414c89aa65692e0a563f82~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1080&h=549&s=591296&e=png&b=fffdfd\" alt=\"\" data-href=\"\" style=\"\"/></p><p>去年 7 月的时候我发了一个朋友圈，在朋友圈宣布开始写公众号。</p><p>其实当时根本不知道要写什么内容，用什么风格，文章受众是谁，更别提能坚持写多久了。</p><p>2022 下半年其实就写了 20 篇左右的文章，后来陆续都删掉了，因为感觉写的太差了。</p><p>2023 年上半年也在拖拖拉拉，时断时续，真正开始坚持日更是从今年 10 月。</p><p>短短一年收获了很多：有一起学习的小伙伴、自我成长的成就感、还有微薄到不值一提的收益。和我一起来看看吧。</p><h2>1、一起学习的小伙伴</h2><p>从今年下半年开始，就几乎每天都有小伙伴加微信，咨询一些 AI 算法、AI 工作相关的内容。</p><p>这其中比较多的是对算法理解的交流，还有对 AI 行业岗位的交流。</p><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c240ecf640749819833ac911e37d2df~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1080&h=1034&s=180289&e=jpg&b=f3f0ef\" alt=\"\" data-href=\"\" style=\"\"/></p><p>关于 AI 行业的岗位拆解文章，其实只写了 4 篇，分别是：<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038230%26idx%3D1%26sn%3Dea5635dbc8d3f4a16949f4f47e042814%26chksm%3D834b161ab43c9f0c59ea72c54d85bbcad64aca3f09960966c7c13a2fce49aa6f778c2fd9bdb8%26scene%3D21%23wechat_redirect\" target=\"_blank\">算子岗</a>、<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038071%26idx%3D1%26sn%3Dd1f2e6811c4f0c39d732d230dd373fea%26chksm%3D834b177bb43c9e6d4ca9499563e6302fa2d5ff0b0d64262c0911ac9fd891f712faf30d7e878f%26scene%3D21%23wechat_redirect\" target=\"_blank\">高性能计算</a>、<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038158%26idx%3D1%26sn%3D9191a1c9ad1bb1c574e148f46d23122d%26chksm%3D834b16c2b43c9fd4bbf8563b555ae53a0d98d06164967ac5cd027ac9c19adc6eda3b1a4fdc40%26scene%3D21%23wechat_redirect\" target=\"_blank\">部署岗</a>以及<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038134%26idx%3D1%26sn%3D09ebff43399d744dc22c023af035bd23%26chksm%3D834b16bab43c9facbb3a54c2b54ba0dec03c641b1943345c848e408d5a5b50bedca5141cd2bd%26scene%3D21%23wechat_redirect\" target=\"_blank\">量化岗</a>，但却引起了不少小伙伴的关注。明年计划多写一些 AI 行业岗位拆解文章，希望能帮助更多正在 AI 行业找工作的人。</p><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87d5023c205347b78bc6f7494087cdb3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=610&h=555&s=299933&e=png&b=daeee4\" alt=\"\" data-href=\"\" style=\"\"/></p><p>这半年的时间，我的微信通讯录人数，由原来的 200 多变成了现在的 700 多。</p><p>虽然比认识的一些大佬还差很远(比如认识的某一互联网头部博主，他有好几个微信，加起来微信通讯录总人数据说有几万)。</p><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb59d5d90b654e97b1878396c2f117db~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1080&h=471&s=18048&e=jpg&b=fbfbfb\" alt=\"\" data-href=\"\" style=\"\"/></p><p>持续增长的通讯录数字，总能让我感到满满的学习热情。</p><p>正是由于这些咨询的存在，也在不断倒逼自己学习，不断去接触更新颖的算法、更前沿的科技。</p><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ac4e6cb82bf4dfb82b9ed771c6c548a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1066&h=1292&s=105731&e=jpg&b=f2eeed\" alt=\"\" data-href=\"\" style=\"\"/></p><p>立个 flag，今年通讯录增长了大约 500 人，希望明年这个时候，通讯录可以突破到 2000 人</p><h2>2、自我成长的成就感</h2><p>这一点就有太多感悟了。</p><p>坚持原创日更，最煎熬的经常是每天晚上下班之后，却还不知道今天要写什么内容，但是第二天早上一定要发表。</p><p>这个时候就会有很多问题出现：比如如何快速选题、如何快速成文、如何坚持写完。</p><p>在这几个月的时间里，从最开始 1 个多小时写完一篇文章，到现在可以控制在 1 小时之内，心态也从最开始的不适应到现在逐渐适应，可以说，心态和写作水平都有不少提高。</p><p>今年写了几篇阅读量还不错的文章，有<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038223%26idx%3D1%26sn%3D25838244841c18d5943bd2ecad2222d7%26chksm%3D834b1603b43c9f156be604180169f012a0bfc8189aaaed677222fd23a3971ce17792fe144c98%26scene%3D21%23wechat_redirect\" target=\"_blank\">9000+阅读</a>​和<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038009%26idx%3D1%26sn%3Da2c02b0c6fb6d33c60995d51aab785f9%26chksm%3D834b1735b43c9e236a8a68846bed4f2b7c8e036d1487c675cd821f5aed105d76fd9833611d5c%26scene%3D21%23wechat_redirect\" target=\"_blank\">8000+阅读</a>等等，也终于在 2023 年结束前，收获了第一篇破万阅读的文章：<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038541%26idx%3D1%26sn%3Dad2f4a9511d373acde119485c705f6c1%26chksm%3D834b1541b43c9c577a31b97ebafedd2d143e813b5c65217d19effdb66133e527d86b4b619f7b%26scene%3D21%23wechat_redirect\" target=\"_blank\">1.4w+阅读</a>。</p><p>写作这块，也立一个 flag， 争取明年可以写出 1-2 篇 10w+。</p><h2>3、不值一提的收益，强大的正反馈</h2><p>在决定写作之初，没想过靠写作赚钱。但是中间陆陆续续停更，无法坚持日更，后来也复盘了一下，最大的原因就在于写作没有正反馈。</p><p>相信有不少小伙伴可能也知道，前段时间博客园卖会员续命的新闻。</p><p>博客园从创立之处秉着为爱发电的原则，很少赚钱，却创立了一个很好用的博客网站。但是因为没有盈利，导致坚持不下去，面临着倒闭的风险。</p><p><strong>为爱发电的输出，没有持续的正反馈输入和收益，是很可怕的。</strong></p><p>于是，在今年 11 月 11 号，我尝试做了一个对我而言有收益的事情。写了一个从零入门计算视觉的专栏，内容全部是硬核知识点讲解和代码实战，让我没想到的是，已经有 100+ 小伙伴购买支持了。</p><p>50+ 篇原创知识点讲解，50+ 篇代码实战讲解，目前还在更新中，链接：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649037889%26idx%3D1%26sn%3D92e8e60fbe5db2bed5fbf3565fbdfcd9%26chksm%3D834b17cdb43c9edbf6467251c9c0f5f9a9f3d73efa1c15fc1941f6a1c5a87a5612fdbfe04e68%26token%3D1459263704%26lang%3Dzh_CN%23rd\" target=\"_blank\">计算机视觉入门</a>。</p><p>除了这个付费专栏，也尝试接了一些有利于小伙伴成长的广告，当然我也过滤掉了更多不适合我文章风格的广告邀约。</p><p>其实说实话，广告收入并没有多少，可能连上面专栏的零头都赶不上。但我觉得，这种少量的收益是在拓宽自己的渠道，多种渠道上的正反馈，会让自己更有动力进行创作。</p><p>虽然如此，但看总收益其实还是微不足道，和工作收入比起来，简直杯水车薪。</p><p>我之前在朋友圈发过一些文字，大意是说，无论写专栏也好，还是接广告也好，这点收益根本不值得一提，我也不指望这个来赚钱。</p><p>但是作为正反馈，这些收益的积极作用却是很大的。</p><p>最后，总结一下今年写文章的收获：逼着自己学到了更多知识、也变得更加自律，认识了更多 AI 行业的朋友，拓宽了自己的视野，也有了一点收益上的正反馈。</p><p>展望一下明年，立一些 flag 目标吧。</p><ul><li>公众号继续坚持日更，创作至少 200 篇优质内容</li><li>微信通讯录好友突破 2000</li><li>知乎问答突破 1000 条，知乎长文输出 30+ 篇。</li><li>掘金社区和 CSDN 持续输出文章</li><li>创建</li></ul><p>免费知识星球，沉淀优质文章到星球，永久免费阅读</p><ul><li>开发 3 门新的专栏(可能会集中在 CPU 向量指令集、TensorRT 最佳实践以及 GPT 大模型相关，如果有小伙伴有需求，可以找我交流)</li><li>创建一个写作陪伴群(入场券 9.9 起，随人数增加而涨价，提供公众号和知乎写作指导与避坑指南，最重要的是陪伴、一起努力)，欢迎各位希望通过写作来倒逼自己成长的小伙伴加入。<br></li><li>作者：董董灿是个攻城狮<br>链接：https://juejin.cn/post/7319311129867370559<br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li></ul>",
    "id": 54661229187334,
    "lookNum": 6642
  },
  {
    "title": "坚持写作一年我赚了啥",
    "label": [
      "代码人生",
      "STYLED-COMPONENT",
      "MUI",
      "ANGULAR"
    ],
    "time": "2024-03-19 03:52:50",
    "uptime": "2024-03-19 03:54:31",
    "creator": "风中追风",
    "type": "recommend",
    "abstract": "其实当时根本不知道要写什么内容，用什么风格，文章受众是谁，更别提能坚持写多久了。",
    "logo": "https://wx3.sinaimg.cn/mw690/5396ee05ly8hljl9hq9zlj20m90m9whx.jpg",
    "content": "<h2 style=\"text-align: start;\">1、一起学习的小伙伴</h2><p style=\"text-align: start;\">从今年下半年开始，就几乎每天都有小伙伴加微信，咨询一些 AI 算法、AI 工作相关的内容。</p><p style=\"text-align: start;\">这其中比较多的是对算法理解的交流，还有对 AI 行业岗位的交流。</p><h2>2、自我成长的成就感</h2><p>这一点就有太多感悟了。</p><p>坚持原创日更，最煎熬的经常是每天晚上下班之后，却还不知道今天要写什么内容，但是第二天早上一定要发表。</p><p>这个时候就会有很多问题出现：比如如何快速选题、如何快速成文、如何坚持写完。</p><p>在这几个月的时间里，从最开始 1 个多小时写完一篇文章，到现在可以控制在 1 小时之内，心态也从最开始的不适应到现在逐渐适应，可以说，心态和写作水平都有不少提高。</p><p>今年写了几篇阅读量还不错的文章，有<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038223%26idx%3D1%26sn%3D25838244841c18d5943bd2ecad2222d7%26chksm%3D834b1603b43c9f156be604180169f012a0bfc8189aaaed677222fd23a3971ce17792fe144c98%26scene%3D21%23wechat_redirect\" target=\"_blank\">9000+阅读</a>​和<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038009%26idx%3D1%26sn%3Da2c02b0c6fb6d33c60995d51aab785f9%26chksm%3D834b1735b43c9e236a8a68846bed4f2b7c8e036d1487c675cd821f5aed105d76fd9833611d5c%26scene%3D21%23wechat_redirect\" target=\"_blank\">8000+阅读</a>等等，也终于在 2023 年结束前，收获了第一篇破万阅读的文章：<a href=\"https://link.juejin.cn?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038541%26idx%3D1%26sn%3Dad2f4a9511d373acde119485c705f6c1%26chksm%3D834b1541b43c9c577a31b97ebafedd2d143e813b5c65217d19effdb66133e527d86b4b619f7b%26scene%3D21%23wechat_redirect\" target=\"_blank\">1.4w+阅读</a>。</p><p>写作这块，也立一个 flag， 争取明年可以写出 1-2 篇 10w+。</p><h2>3、不值一提的收益，强大的正反馈</h2><p>在决定写作之初，没想过靠写作赚钱。但是中间陆陆续续停更，无法坚持日更，后来也复盘了一下，最大的原因就在于写作没有正反馈。</p><p>相信有不少小伙伴可能也知道，前段时间博客园卖会员续命的新闻。</p><p>博客园从创立之处秉着为爱发电的原则，很少赚钱，却创立了一个很好用的博客网站。但是因为没有盈利，导致坚持不下去，面临着倒闭的风险。</p><p><strong>为爱发电的输出，没有持续的正反馈输入和收益，是很可怕的。</strong></p><p>于是，在今年 11 月 11 号，我尝试做了一个对我而言有收益的事情。写了一个从零入门计算视觉的专栏，内容全部是硬核知识点讲解和代码实战，让我没想到的是，已经有 100+ 小伙伴购买支持了。</p><p>50+ 篇原创知识点讲解，50+ 篇代码实战讲解，目前还在更新中，链接：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649037889%26idx%3D1%26sn%3D92e8e60fbe5db2bed5fbf3565fbdfcd9%26chksm%3D834b17cdb43c9edbf6467251c9c0f5f9a9f3d73efa1c15fc1941f6a1c5a87a5612fdbfe04e68%26token%3D1459263704%26lang%3Dzh_CN%23rd\" target=\"_blank\">计算机视觉入门</a>。</p><p>除了这个付费专栏，也尝试接了一些有利于小伙伴成长的广告，当然我也过滤掉了更多不适合我文章风格的广告邀约。</p><p>其实说实话，广告收入并没有多少，可能连上面专栏的零头都赶不上。但我觉得，这种少量的收益是在拓宽自己的渠道，多种渠道上的正反馈，会让自己更有动力进行创作。</p><p>虽然如此，但看总收益其实还是微不足道，和工作收入比起来，简直杯水车薪。</p><p>我之前在朋友圈发过一些文字，大意是说，无论写专栏也好，还是接广告也好，这点收益根本不值得一提，我也不指望这个来赚钱。</p><p>但是作为正反馈，这些收益的积极作用却是很大的。</p><p>最后，总结一下今年写文章的收获：逼着自己学到了更多知识、也变得更加自律，认识了更多 AI 行业的朋友，拓宽了自己的视野，也有了一点收益上的正反馈。</p><p>展望一下明年，立一些 flag 目标吧。</p><ul><li>公众号继续坚持日更，创作至少 200 篇优质内容</li><li>微信通讯录好友突破 2000</li><li>知乎问答突破 1000 条，知乎长文输出 30+ 篇。</li><li>掘金社区和 CSDN 持续输出文章</li><li>创建</li></ul><p>免费知识星球，沉淀优质文章到星球，永久免费阅读</p><ul><li>开发 3 门新的专栏(可能会集中在 CPU 向量指令集、TensorRT 最佳实践以及 GPT 大模型相关，如果有小伙伴有需求，可以找我交流)</li><li>创建一个写作陪伴群(入场券 9.9 起，随人数增加而涨价，提供公众号和知乎写作指导与避坑指南，最重要的是陪伴、一起努力)，欢迎各位希望通过写作来倒逼自己成长的小伙伴加入。</li></ul><p>最后，祝大家 2024 年都能完美实现新年愿望。</p><p>本文首发于：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzAwOTc2NDU3OQ%3D%3D%26mid%3D2649038610%26idx%3D1%26sn%3D483a788e7bca2bed98621a256cd3582c%26chksm%3D834b149eb43c9d88cab50fa789a7a2869787fabee276e6b23f1614236138b9cece87552a3b43%26token%3D1459263704%26lang%3Dzh_CN%23rd\" target=\"_blank\">我这个小白坚持了一年写作，赚了什么？</a></p><p>写文不易，点个赞呗~<br></p><p>作者：董董灿是个攻城狮<br>链接：https://juejin.cn/post/7319311129867370559<br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p><br></p>",
    "id": 11233078615488,
    "lookNum": 2642
  },
  {
    "title": "AI领域包括什么？",
    "label": [
      "CSS",
      "NUSTJS",
      "ANGULAR",
      "IONIC",
      "人生思考"
    ],
    "time": "2024-03-19 03:55:39",
    "uptime": "2024-03-19 03:56:30",
    "creator": "风中追风",
    "type": "recommend",
    "abstract": "但是在我的经历中，AI大致分为几个大类：机器学习、深度学习、大数据、及强化学习。下面将通过自身经历介绍接触这些领域的过程。",
    "logo": "https://img2.baidu.com/it/u=3500543877,3069705113&fm=253&fmt=auto&app=138&f=JPEG?w=350&h=499",
    "content": "<p><br></p><h1>我和AI之间的关系</h1><p>为了给读者们提供些代入感，我想在文章的开头说说自己的故事，给读者一点学习AI的想法。</p><h2>我是怎么和AI扯上关系的？</h2><p>本人近年本科毕业。毕业于XX的XX大学，专业机电一体化，主修机器人专业。讲心里话，这个专业不是一个好专业。学的东西非常杂：机械工程、电子工程、软件工程、项目管理等，样样学，但是样样不精通，大三前基本没有IT相关的课程，不是CAD就是逻辑电路、工程力学等。涉及的编程课只限于Matlab、C、Assembly （是的你没有听错，这是一个比C更基础的编程语言，只限于嵌入式）。但是我们专业的导师都是机器人相关的领域，使用的不是python/c++，就是人工智能、控制系统，而且都是课程所涵盖不到的高阶用法。。。</p><p>所以为了保证成绩良好、也为了保证有较好的就业方向，不得已在大一转大二的假期中开始接触AI领域，直到现在。</p><p>我在上大学时和AI有关的主要经历包括但不限于：</p><ol><li>在微软的Microsoft Accelerator Program中，以non-technical方向参与了机器学习对于不同红酒图片分类。</li><li>在学校假期的Research实习中，分析研究了医院大数据中糖尿病III期药物对病人不同时间的指标影响。</li><li>在实习经历中，研究了机器学习替代深度学习预测激光雷达point pillar的对象，并且设计了预标注模型。</li><li>在论文研究中，探讨了少样本在流行模型中的目标检测（针对植物病害），并且参与了创业比赛、一些农业方面的学术交流。</li><li>在学校最后一年的项目中，使用Yolov5设计人机围棋检测及算法应用。</li><li>在学校最后一年中使用Matlab完成computer vision项目（是的，为什么学校要用Matlab而不是其他语言，我也想知道）。</li><li>在实习中，参与了自动驾驶领域的算法工作。</li></ol><p>这些经历虽然不算多，但是已经和AI有关系了吧。。。</p><h2>AI和我的相杀</h2><p>是的，不是相爱相杀，是相杀，没有爱。。。</p><p>先谈一点接触AI前对于它的误解，相信有同学和我有类似的经历（不感兴趣的可以直接跳过）。</p><p>没上大学前，我是非常排斥AI的，有如下几个原因：</p><ol><li>家庭因素：因为家里有一个学IT的亲戚，明明对我们家极差无比，还一天到晚炫耀她读IT的儿子怎么怎么好、怎么怎么对AI了解。父亲甚至为了讨好他们不让我学习AI，认为会抢他们饭碗。我打心底希望AI马上没落。</li><li>生活因素：每天都是刷题的日子，而且理科男还被分到了文科班，大多数时间都被按着头皮被语文历史，没有时间接触AI，只是拿AI作为作文的素材，而且还是硬背的，和AI没有任何的感情。</li><li>内因：我对于机械感兴趣，其实我甚至对于编程也是非常讨厌的，认为总有一天人们会不得不过上没有电子产品的日子，所以觉得编程没意义。</li></ol><p>很遗憾，天不随人愿，到目前为止还没有见到AI没落的趋势，甚至电动车正快速地替代者传统的汽车。。。。。。</p><p>回到正题。AI对于生活的影响越来越明显，在我生活中遇到了下列和AI有关的故事：</p><ol><li>ChatGPT：作为目前全球最火的大语言模型，已经开始替代许多职业和功能，目前可以做到根据文字成图、输入关键字进行知识整理解答、自动生成代码等操作。</li><li>自动驾驶：配合着新能源快速地取代传统油车，像特斯拉、国内的蔚来、理想、比亚迪等自动驾驶。</li><li>电商及短视频：像京东、阿里这些电商，使用深度学习对客户进行商品预测、强化学习及其他算法设置。</li></ol><hr/><p><br></p><h1>AI领域包括什么？</h1><p>AI领域可以包括很多东西。如果用百度搜索一下，就可以看到很多回答，就如下图所示：<br></p><p><br></p><p><br></p><p>但是在我的经历中，AI大致分为几个大类：机器学习、深度学习、大数据、及强化学习。下面将通过自身经历介绍接触这些领域的过程。</p><hr/><p><br></p><h2>大数据</h2><p>其实从专业的角度来说，大数据（Big Data）并不属于AI领域。因为大数据属于数据科学（Data Science），AI的大部分方向（像深度学习、机器学习等）属于计算机科学（computer science）或者是计算机视觉（computer vision）一类的。但是从客观角度来说，<strong>研究AI的人非常需要大数据，并且越来越多的领域开始将大数据和AI联系起来</strong>。</p><p>而且，从个人角度来说，这也是我真正接触AI领域的敲门砖。指导我进行大数据研究的导师也带我走进机器学习。</p><p>回到正题，什么是大数据？</p><p>许多领域都有所谓的“大数据”。比如通信领域，认为1M的数据就是“大数据”。但是这里讲的大数据，更多的<strong>是指需要使用到云端的、或者需要建立数据库的</strong>大数据。</p><h3>如何使用大数据？</h3><p>平常可以通过SQL、MongoDB等编程语言使用到它。<strong>对于用户端，更多地操作是提取数据做</strong> <strong>数据分析</strong> <strong>，而不是输入数据</strong>。</p><h3>如何学习大数据？</h3><p>我主要讲一下目前接触最多的<strong>SQL</strong>吧。SQL的话我之前使用过**<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.postgresql.org%2F\" target=\"_blank\">PostgreSQL</a><strong>和</strong>BigQuery**。这两个在使用SQL的语法上基本没有差别，区别更多地在于大数据的数据量上，<strong>BigQuery</strong>因为是使用web形式，使用的是Google的云端，可以支持的数据量更大，但是可能存在需要付费的情况，如果没有相关机构支持的话可能有点问题。</p><p>然后是关于SQL的语法。<strong>PostgreSQL</strong>很贴心地提供了一个SQL 的documentation，只要下了就可以从本地打开，如下图所示。<br></p><p><br></p>",
    "id": 67377835632597,
    "lookNum": 9680
  },
  {
    "title": "如何入门AI领域？ --- 一个非IT同学的经验",
    "label": [
      "CSS",
      "NUSTJS",
      "ANGULAR"
    ],
    "time": "2024-03-19 03:55:44",
    "uptime": "2024-03-19 03:55:44",
    "creator": "风中追风",
    "type": "recommend",
    "abstract": "此文主要分享了一个非IT专业本科生的故事，关于他在AI领域摸爬滚打的经历。  这里为了节约大家时间，请大家在阅读前看一下目录，从目录中选择需要的开始看起。  这篇文章针对的读者是完全不懂行的小白或者开始学习的同学，高手们你们说什么都是对的:p",
    "logo": "https://img2.baidu.com/it/u=3500543877,3069705113&fm=253&fmt=auto&app=138&f=JPEG?w=350&h=499",
    "content": "<p><br></p><h1>我和AI之间的关系</h1><p>为了给读者们提供些代入感，我想在文章的开头说说自己的故事，给读者一点学习AI的想法。</p><h2>我是怎么和AI扯上关系的？</h2><p>本人近年本科毕业。毕业于XX的XX大学，专业机电一体化，主修机器人专业。讲心里话，这个专业不是一个好专业。学的东西非常杂：机械工程、电子工程、软件工程、项目管理等，样样学，但是样样不精通，大三前基本没有IT相关的课程，不是CAD就是逻辑电路、工程力学等。涉及的编程课只限于Matlab、C、Assembly （是的你没有听错，这是一个比C更基础的编程语言，只限于嵌入式）。但是我们专业的导师都是机器人相关的领域，使用的不是python/c++，就是人工智能、控制系统，而且都是课程所涵盖不到的高阶用法。。。</p><p>所以为了保证成绩良好、也为了保证有较好的就业方向，不得已在大一转大二的假期中开始接触AI领域，直到现在。</p><p>我在上大学时和AI有关的主要经历包括但不限于：</p><ol><li>在微软的Microsoft Accelerator Program中，以non-technical方向参与了机器学习对于不同红酒图片分类。</li><li>在学校假期的Research实习中，分析研究了医院大数据中糖尿病III期药物对病人不同时间的指标影响。</li><li>在实习经历中，研究了机器学习替代深度学习预测激光雷达point pillar的对象，并且设计了预标注模型。</li><li>在论文研究中，探讨了少样本在流行模型中的目标检测（针对植物病害），并且参与了创业比赛、一些农业方面的学术交流。</li><li>在学校最后一年的项目中，使用Yolov5设计人机围棋检测及算法应用。</li><li>在学校最后一年中使用Matlab完成computer vision项目（是的，为什么学校要用Matlab而不是其他语言，我也想知道）。</li><li>在实习中，参与了自动驾驶领域的算法工作。</li></ol><p>这些经历虽然不算多，但是已经和AI有关系了吧。。。</p><h2>AI和我的相杀</h2><p>是的，不是相爱相杀，是相杀，没有爱。。。</p><p>先谈一点接触AI前对于它的误解，相信有同学和我有类似的经历（不感兴趣的可以直接跳过）。</p><p>没上大学前，我是非常排斥AI的，有如下几个原因：</p><ol><li>家庭因素：因为家里有一个学IT的亲戚，明明对我们家极差无比，还一天到晚炫耀她读IT的儿子怎么怎么好、怎么怎么对AI了解。父亲甚至为了讨好他们不让我学习AI，认为会抢他们饭碗。我打心底希望AI马上没落。</li><li>生活因素：每天都是刷题的日子，而且理科男还被分到了文科班，大多数时间都被按着头皮被语文历史，没有时间接触AI，只是拿AI作为作文的素材，而且还是硬背的，和AI没有任何的感情。</li><li>内因：我对于机械感兴趣，其实我甚至对于编程也是非常讨厌的，认为总有一天人们会不得不过上没有电子产品的日子，所以觉得编程没意义。</li></ol><p>很遗憾，天不随人愿，到目前为止还没有见到AI没落的趋势，甚至电动车正快速地替代者传统的汽车。。。。。。</p><p>回到正题。AI对于生活的影响越来越明显，在我生活中遇到了下列和AI有关的故事：</p><ol><li>ChatGPT：作为目前全球最火的大语言模型，已经开始替代许多职业和功能，目前可以做到根据文字成图、输入关键字进行知识整理解答、自动生成代码等操作。</li><li>自动驾驶：配合着新能源快速地取代传统油车，像特斯拉、国内的蔚来、理想、比亚迪等自动驾驶。</li><li>电商及短视频：像京东、阿里这些电商，使用深度学习对客户进行商品预测、强化学习及其他算法设置。</li></ol><hr/><p><br></p><h1>AI领域包括什么？</h1><p>AI领域可以包括很多东西。如果用百度搜索一下，就可以看到很多回答，就如下图所示：<br></p><p><br></p><p><br></p><p>但是在我的经历中，AI大致分为几个大类：机器学习、深度学习、大数据、及强化学习。下面将通过自身经历介绍接触这些领域的过程。</p><hr/><p><br></p><h2>大数据</h2><p>其实从专业的角度来说，大数据（Big Data）并不属于AI领域。因为大数据属于数据科学（Data Science），AI的大部分方向（像深度学习、机器学习等）属于计算机科学（computer science）或者是计算机视觉（computer vision）一类的。但是从客观角度来说，<strong>研究AI的人非常需要大数据，并且越来越多的领域开始将大数据和AI联系起来</strong>。</p><p>而且，从个人角度来说，这也是我真正接触AI领域的敲门砖。指导我进行大数据研究的导师也带我走进机器学习。</p><p>回到正题，什么是大数据？</p><p>许多领域都有所谓的“大数据”。比如通信领域，认为1M的数据就是“大数据”。但是这里讲的大数据，更多的<strong>是指需要使用到云端的、或者需要建立数据库的</strong>大数据。</p><h3>如何使用大数据？</h3><p>平常可以通过SQL、MongoDB等编程语言使用到它。<strong>对于用户端，更多地操作是提取数据做</strong> <strong>数据分析</strong> <strong>，而不是输入数据</strong>。</p><h3>如何学习大数据？</h3><p>我主要讲一下目前接触最多的<strong>SQL</strong>吧。SQL的话我之前使用过**<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.postgresql.org%2F\" target=\"_blank\">PostgreSQL</a><strong>和</strong>BigQuery**。这两个在使用SQL的语法上基本没有差别，区别更多地在于大数据的数据量上，<strong>BigQuery</strong>因为是使用web形式，使用的是Google的云端，可以支持的数据量更大，但是可能存在需要付费的情况，如果没有相关机构支持的话可能有点问题。</p><p>然后是关于SQL的语法。<strong>PostgreSQL</strong>很贴心地提供了一个SQL 的documentation，只要下了就可以从本地打开，如下图所示。<br></p><p><br></p>",
    "id": 96803499875993,
    "lookNum": 9687
  },
  {
    "title": "如何入门AI领域？ --- 一个非IT同学的经验",
    "label": [
      "CSS",
      "NUSTJS",
      "ANGULAR"
    ],
    "time": "2024-03-19 03:55:46",
    "uptime": "2024-03-19 03:55:46",
    "creator": "风中追风",
    "type": "recommend",
    "abstract": "此文主要分享了一个非IT专业本科生的故事，关于他在AI领域摸爬滚打的经历。  这里为了节约大家时间，请大家在阅读前看一下目录，从目录中选择需要的开始看起。  这篇文章针对的读者是完全不懂行的小白或者开始学习的同学，高手们你们说什么都是对的:p",
    "logo": "https://img2.baidu.com/it/u=3500543877,3069705113&fm=253&fmt=auto&app=138&f=JPEG?w=350&h=499",
    "content": "<p><br></p><h1>我和AI之间的关系</h1><p>为了给读者们提供些代入感，我想在文章的开头说说自己的故事，给读者一点学习AI的想法。</p><h2>我是怎么和AI扯上关系的？</h2><p>本人近年本科毕业。毕业于XX的XX大学，专业机电一体化，主修机器人专业。讲心里话，这个专业不是一个好专业。学的东西非常杂：机械工程、电子工程、软件工程、项目管理等，样样学，但是样样不精通，大三前基本没有IT相关的课程，不是CAD就是逻辑电路、工程力学等。涉及的编程课只限于Matlab、C、Assembly （是的你没有听错，这是一个比C更基础的编程语言，只限于嵌入式）。但是我们专业的导师都是机器人相关的领域，使用的不是python/c++，就是人工智能、控制系统，而且都是课程所涵盖不到的高阶用法。。。</p><p>所以为了保证成绩良好、也为了保证有较好的就业方向，不得已在大一转大二的假期中开始接触AI领域，直到现在。</p><p>我在上大学时和AI有关的主要经历包括但不限于：</p><ol><li>在微软的Microsoft Accelerator Program中，以non-technical方向参与了机器学习对于不同红酒图片分类。</li><li>在学校假期的Research实习中，分析研究了医院大数据中糖尿病III期药物对病人不同时间的指标影响。</li><li>在实习经历中，研究了机器学习替代深度学习预测激光雷达point pillar的对象，并且设计了预标注模型。</li><li>在论文研究中，探讨了少样本在流行模型中的目标检测（针对植物病害），并且参与了创业比赛、一些农业方面的学术交流。</li><li>在学校最后一年的项目中，使用Yolov5设计人机围棋检测及算法应用。</li><li>在学校最后一年中使用Matlab完成computer vision项目（是的，为什么学校要用Matlab而不是其他语言，我也想知道）。</li><li>在实习中，参与了自动驾驶领域的算法工作。</li></ol><p>这些经历虽然不算多，但是已经和AI有关系了吧。。。</p><h2>AI和我的相杀</h2><p>是的，不是相爱相杀，是相杀，没有爱。。。</p><p>先谈一点接触AI前对于它的误解，相信有同学和我有类似的经历（不感兴趣的可以直接跳过）。</p><p>没上大学前，我是非常排斥AI的，有如下几个原因：</p><ol><li>家庭因素：因为家里有一个学IT的亲戚，明明对我们家极差无比，还一天到晚炫耀她读IT的儿子怎么怎么好、怎么怎么对AI了解。父亲甚至为了讨好他们不让我学习AI，认为会抢他们饭碗。我打心底希望AI马上没落。</li><li>生活因素：每天都是刷题的日子，而且理科男还被分到了文科班，大多数时间都被按着头皮被语文历史，没有时间接触AI，只是拿AI作为作文的素材，而且还是硬背的，和AI没有任何的感情。</li><li>内因：我对于机械感兴趣，其实我甚至对于编程也是非常讨厌的，认为总有一天人们会不得不过上没有电子产品的日子，所以觉得编程没意义。</li></ol><p>很遗憾，天不随人愿，到目前为止还没有见到AI没落的趋势，甚至电动车正快速地替代者传统的汽车。。。。。。</p><p>回到正题。AI对于生活的影响越来越明显，在我生活中遇到了下列和AI有关的故事：</p><ol><li>ChatGPT：作为目前全球最火的大语言模型，已经开始替代许多职业和功能，目前可以做到根据文字成图、输入关键字进行知识整理解答、自动生成代码等操作。</li><li>自动驾驶：配合着新能源快速地取代传统油车，像特斯拉、国内的蔚来、理想、比亚迪等自动驾驶。</li><li>电商及短视频：像京东、阿里这些电商，使用深度学习对客户进行商品预测、强化学习及其他算法设置。</li></ol><hr/><p><br></p><h1>AI领域包括什么？</h1><p>AI领域可以包括很多东西。如果用百度搜索一下，就可以看到很多回答，就如下图所示：<br></p><p><br></p><p><br></p><p>但是在我的经历中，AI大致分为几个大类：机器学习、深度学习、大数据、及强化学习。下面将通过自身经历介绍接触这些领域的过程。</p><hr/><p><br></p><h2>大数据</h2><p>其实从专业的角度来说，大数据（Big Data）并不属于AI领域。因为大数据属于数据科学（Data Science），AI的大部分方向（像深度学习、机器学习等）属于计算机科学（computer science）或者是计算机视觉（computer vision）一类的。但是从客观角度来说，<strong>研究AI的人非常需要大数据，并且越来越多的领域开始将大数据和AI联系起来</strong>。</p><p>而且，从个人角度来说，这也是我真正接触AI领域的敲门砖。指导我进行大数据研究的导师也带我走进机器学习。</p><p>回到正题，什么是大数据？</p><p>许多领域都有所谓的“大数据”。比如通信领域，认为1M的数据就是“大数据”。但是这里讲的大数据，更多的<strong>是指需要使用到云端的、或者需要建立数据库的</strong>大数据。</p><h3>如何使用大数据？</h3><p>平常可以通过SQL、MongoDB等编程语言使用到它。<strong>对于用户端，更多地操作是提取数据做</strong> <strong>数据分析</strong> <strong>，而不是输入数据</strong>。</p><h3>如何学习大数据？</h3><p>我主要讲一下目前接触最多的<strong>SQL</strong>吧。SQL的话我之前使用过**<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.postgresql.org%2F\" target=\"_blank\">PostgreSQL</a><strong>和</strong>BigQuery**。这两个在使用SQL的语法上基本没有差别，区别更多地在于大数据的数据量上，<strong>BigQuery</strong>因为是使用web形式，使用的是Google的云端，可以支持的数据量更大，但是可能存在需要付费的情况，如果没有相关机构支持的话可能有点问题。</p><p>然后是关于SQL的语法。<strong>PostgreSQL</strong>很贴心地提供了一个SQL 的documentation，只要下了就可以从本地打开，如下图所示。<br></p><p><br></p>",
    "id": 55278891961045,
    "lookNum": 9565
  }
]